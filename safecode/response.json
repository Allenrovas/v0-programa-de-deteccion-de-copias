{
    "session_id": "323c8304-f54c-4baa-a6a4-eefec5065d1f",
    "message": "Archivos procesados correctamente",
    "num_files": 3,
    "language": "javascript",
    "result_summary": {
        "session_id": "323c8304-f54c-4baa-a6a4-eefec5065d1f",
        "language": "javascript",
        "num_submissions": 3,
        "num_files_analyzed": 23,
        "similarity_threshold": 0.6,
        "fragment_threshold": 0.7,
        "similarity_results": [
            {
                "submission1": "extracted_-EDD_junio-Proyecto2_201800992-main",
                "submission2": "extracted_-EDD_junio-Proyecto2_201801178-main",
                "max_similarity": 0.817989114278231,
                "is_plagiarism": true,
                "plagiarism_probability": 0.8040902838422685,
                "similar_files": [
                    {
                        "file1": "-EDD_junio-Proyecto2_201800992-main\\js\\BlockChain\\blockChain.js",
                        "file2": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\block.js",
                        "token_similarity": 0.7660278148232484,
                        "ml_similarity": 0.8959310634607047,
                        "combined_similarity": 0.817989114278231,
                        "is_plagiarism": true,
                        "plagiarism_probability": 0.8040902838422685,
                        "fragments": [
                            {
                                "fragment1_start": 0,
                                "fragment1_end": 20,
                                "fragment2_start": 280,
                                "fragment2_end": 300,
                                "similarity": 0.7727474779549475,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 0,
                                "fragment1_end": 1200,
                                "fragment2_start": 1520,
                                "fragment2_end": 1540,
                                "similarity": 0.9412181204694048,
                                "code1": "\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1180,
                                "fragment1_end": 1320,
                                "fragment2_start": 1630,
                                "fragment2_end": 1660,
                                "similarity": 0.9407070962311863,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1300,
                                "fragment1_end": 1480,
                                "fragment2_start": 1710,
                                "fragment2_end": 1760,
                                "similarity": 0.8763965607972026,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1650,
                                "fragment1_end": 1670,
                                "fragment2_start": 120,
                                "fragment2_end": 140,
                                "similarity": 0.7536076945309456,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;"
                            },
                            {
                                "fragment1_start": 1750,
                                "fragment1_end": 1790,
                                "fragment2_start": 20,
                                "fragment2_end": 60,
                                "similarity": 0.9765058852081059,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1860,
                                "fragment1_end": 1880,
                                "fragment2_start": 230,
                                "fragment2_end": 250,
                                "similarity": 0.7333905011867399,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                            }
                        ],
                        "ml_fragments": [
                            {
                                "type": "ml_block",
                                "block1": {
                                    "start_line": 0,
                                    "end_line": 50,
                                    "code": "var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; } class Bloque { constructor() { this.id = 0; this.timestamp = \"\"; this.nonce = 0 this.preHash = \"\" this.rootMerkle = \"\" this.hash = \"\" } setdataTime = () => { var today = new Date(); var dd = String(today.getDate()).padStart(2, '0'); var mm = String(today.getMonth() + 1).padStart(2, '0'); var yyyy = today.getFullYear(); var nowh = today.toLocaleTimeString('en-US') today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh; return today } crearBloque = (merkleRoot) => { this.rootMerkle = merkleRoot var flag = true; this.timestamp = this.setdataTime() let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot while (flag) { let aux = (cambiarDatos + this.nonce) this.hash = Sha256.hash(aux) if (this.hash.substring(0, 2) == ! \"00\") { this.preHash = this.hash flag = false } this.nonce++ } this.id++ } } class NodoBlock { constructor(idblock, hash, preHash, merkleRoot, data, fecha) { this.idblock = idblock; this.hash = hash; this.preHash = preHash; this.merkleRoot = merkleRoot; this.data = data; this.fecha = fecha; this.siguiente = null; console.log(\"++++++\"+this.data) } } class BlockChain { constructor() { this.raiz = null; this.ultimo = null this.bloque = new Bloque() } insertar = (data,merkleroot ) => { console.log(\"-------------\" + data) this.bloque.crearBloque(merkleroot) let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp) if (this.raiz == null) { this.raiz = this.ultimo = nuevo } else { this.ultimo.siguiente = nuevo this.ultimo = nuevo } } graph = () => { var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\"; var temp = this.raiz var nodes = \"\"; var conexiones = \"\"; var Nnode = 0; while (temp != null) { nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\"; if (temp.siguiente != null) { var auxnum = Nnode + 1; conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\"; } temp = temp.siguiente Nnode++; } codigodot += \" codigodot += nodes + \"\\n\" codigodot += \" codigodot += \"\\n\" + conexiones + \"\\n}\\n}\" var svg = d3.select(' .width(500) .height(200) .renderDot(codigodot) return console.log(codigodot) } } let block = new BlockChain()"
                                },
                                "block2": {
                                    "start_line": 0,
                                    "end_line": 50,
                                    "code": "import LinkedList from \"../data_structs/linked_list.js\"; class _Block{ constructor({ index, timeStamp, prevHash, rootMerkle, data, }){ this.index = index; this.timeStamp = timeStamp; this.prevHash = prevHash; this.rootMerkle = rootMerkle; this.data = data; this.hash = this._genHash(); this.nonce = 0; this._proofOfWork(); } _proofOfWork(){ while(!this.hash.startsWith('00')){ this.nonce++; this.hash = this._genHash(); } } _genHash(){ return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce); } toString(){ return ` bloque: ${this.index}\\\\n hash: ${this.hash}\\\\n nonce: ${this.nonce}\\\\n prev: ${this.prevHash}\\\\n rootMerkle: ${this.rootMerkle}\\\\n transacciones:\\\\n ${this.data} timeStamp: ${this.timeStamp} `; } } export default class BlockChain{ constructor(){ this.blocks = new LinkedList(); this.index = 0; } genNewBlock(timeStamp, root, list){ const data = { index: this.index++, timeStamp: timeStamp, prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '', rootMerkle: root, data: list, }; this.blocks.add(new _Block(data)); } } var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; }"
                                },
                                "similarity": 0.8959310634607047,
                                "similarity_details": {
                                    "tfidf": 0.91361488423569,
                                    "char_ngram": 0.9145146556404588,
                                    "word_ngram": 0.7044265089909426,
                                    "embedding": 0.9735496044158936
                                }
                            }
                        ]
                    },
                    {
                        "file1": "-EDD_junio-Proyecto2_201800992-main\\js\\BlockChain\\blockChain.js",
                        "file2": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\merkle.js",
                        "token_similarity": 0.7658276814671913,
                        "ml_similarity": 0.8820938949638769,
                        "combined_similarity": 0.8123341668658655,
                        "is_plagiarism": true,
                        "plagiarism_probability": 0.7970154608336859,
                        "fragments": [
                            {
                                "fragment1_start": 0,
                                "fragment1_end": 250,
                                "fragment2_start": 440,
                                "fragment2_end": 690,
                                "similarity": 1.0000000000000009,
                                "code1": "\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 230,
                                "fragment1_end": 660,
                                "fragment2_start": 900,
                                "fragment2_end": 1100,
                                "similarity": 1.0000000000000007,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "class _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                            },
                            {
                                "fragment1_start": 640,
                                "fragment1_end": 760,
                                "fragment2_start": 1110,
                                "fragment2_end": 1200,
                                "similarity": 1.0000000000000002,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 740,
                                "fragment1_end": 990,
                                "fragment2_start": 1260,
                                "fragment2_end": 1430,
                                "similarity": 1.0000000000000007,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 970,
                                "fragment1_end": 990,
                                "fragment2_start": 1450,
                                "fragment2_end": 1470,
                                "similarity": 0.7108814122903837,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 970,
                                "fragment1_end": 1000,
                                "fragment2_start": 1490,
                                "fragment2_end": 1510,
                                "similarity": 1,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 980,
                                "fragment1_end": 1140,
                                "fragment2_start": 1530,
                                "fragment2_end": 1580,
                                "similarity": 1.0000000000000007,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1120,
                                "fragment1_end": 1270,
                                "fragment2_start": 1590,
                                "fragment2_end": 1710,
                                "similarity": 1.0000000000000009,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1250,
                                "fragment1_end": 1280,
                                "fragment2_start": 1800,
                                "fragment2_end": 1830,
                                "similarity": 1,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1260,
                                "fragment1_end": 1440,
                                "fragment2_start": 1880,
                                "fragment2_end": 1900,
                                "similarity": 1.0000000000000007,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                            },
                            {
                                "fragment1_start": 1420,
                                "fragment1_end": 1510,
                                "fragment2_start": 1910,
                                "fragment2_end": 1930,
                                "similarity": 1.0000000000000007,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1740,
                                "fragment1_end": 1790,
                                "fragment2_start": 10,
                                "fragment2_end": 30,
                                "similarity": 0.7258866455167113,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;"
                            },
                            {
                                "fragment1_start": 1800,
                                "fragment1_end": 1830,
                                "fragment2_start": 40,
                                "fragment2_end": 70,
                                "similarity": 0.8471718503999901,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1900,
                                "fragment1_end": 1920,
                                "fragment2_start": 350,
                                "fragment2_end": 370,
                                "similarity": 0.716698972693261,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                            }
                        ],
                        "ml_fragments": [
                            {
                                "type": "ml_block",
                                "block1": {
                                    "start_line": 0,
                                    "end_line": 50,
                                    "code": "var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; } class Bloque { constructor() { this.id = 0; this.timestamp = \"\"; this.nonce = 0 this.preHash = \"\" this.rootMerkle = \"\" this.hash = \"\" } setdataTime = () => { var today = new Date(); var dd = String(today.getDate()).padStart(2, '0'); var mm = String(today.getMonth() + 1).padStart(2, '0'); var yyyy = today.getFullYear(); var nowh = today.toLocaleTimeString('en-US') today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh; return today } crearBloque = (merkleRoot) => { this.rootMerkle = merkleRoot var flag = true; this.timestamp = this.setdataTime() let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot while (flag) { let aux = (cambiarDatos + this.nonce) this.hash = Sha256.hash(aux) if (this.hash.substring(0, 2) == ! \"00\") { this.preHash = this.hash flag = false } this.nonce++ } this.id++ } } class NodoBlock { constructor(idblock, hash, preHash, merkleRoot, data, fecha) { this.idblock = idblock; this.hash = hash; this.preHash = preHash; this.merkleRoot = merkleRoot; this.data = data; this.fecha = fecha; this.siguiente = null; console.log(\"++++++\"+this.data) } } class BlockChain { constructor() { this.raiz = null; this.ultimo = null this.bloque = new Bloque() } insertar = (data,merkleroot ) => { console.log(\"-------------\" + data) this.bloque.crearBloque(merkleroot) let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp) if (this.raiz == null) { this.raiz = this.ultimo = nuevo } else { this.ultimo.siguiente = nuevo this.ultimo = nuevo } } graph = () => { var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\"; var temp = this.raiz var nodes = \"\"; var conexiones = \"\"; var Nnode = 0; while (temp != null) { nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\"; if (temp.siguiente != null) { var auxnum = Nnode + 1; conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\"; } temp = temp.siguiente Nnode++; } codigodot += \" codigodot += nodes + \"\\n\" codigodot += \" codigodot += \"\\n\" + conexiones + \"\\n}\\n}\" var svg = d3.select(' .width(500) .height(200) .renderDot(codigodot) return console.log(codigodot) } } let block = new BlockChain()"
                                },
                                "block2": {
                                    "start_line": 0,
                                    "end_line": 50,
                                    "code": "import LinkedList from \"./linked_list.js\"; class _Node{ constructor(data,id){ this.data = data; this.left = this.right = null; this.id = `n${id}`; } } export default class MerkleTree{ constructor(){ this.root = null; this.dataBlocks = null; this.curr_block = null; this.junkBlocks = null; this.id = 0; } _fillDataBlocks(){ let n = 1; let powerOf2 = Math.pow(2,n); while(powerOf2 < this.dataBlocks.len){ n++; powerOf2 = Math.pow(2,n); } this.junkBlocks = new LinkedList(); for (let i = this.dataBlocks.len; i < powerOf2; i++) { this.junkBlocks.add(i*100); } return n; } genTree(list){ if(list.isEmpty()){ this.dataBlocks = list; this.curr_block = this.dataBlocks.head; const exp = this._fillDataBlocks(); this.root = new _Node(null, this.id++); this._genTreeRec(this.root, exp); this._genHash(this.root); } } _genTreeRec(root, exp){ if(exp > 0){ root.left = new _Node(null, this.id++); root.right = new _Node(null, this.id++); this._genTreeRec(root.left, exp-1); this._genTreeRec(root.right, exp-1); } else{ root.data = Sha256.hash(this.curr_block.data.toString()); if(this.curr_block.next){ this.curr_block = this.curr_block.next; } else{ this.curr_block = this.junkBlocks.head; } } } _genHash(root){ if(root == null){ return; } this._genHash(root.left); this._genHash(root.right); if(!root.data){ root.data = Sha256.hash(root.left.data + root.right.data); } } } var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; }"
                                },
                                "similarity": 0.8820938949638769,
                                "similarity_details": {
                                    "tfidf": 0.9089436926233514,
                                    "char_ngram": 0.8970035633389773,
                                    "word_ngram": 0.6752840782740173,
                                    "embedding": 0.9646190404891968
                                }
                            }
                        ]
                    },
                    {
                        "file1": "-EDD_junio-Proyecto2_201800992-main\\js\\Arboles\\arbolMerkle.js",
                        "file2": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\merkle.js",
                        "token_similarity": 0.681456263861494,
                        "ml_similarity": 0.7826109736901622,
                        "combined_similarity": 0.7219181477929613,
                        "is_plagiarism": false,
                        "plagiarism_probability": 0.6953369351452039,
                        "fragments": [
                            {
                                "fragment1_start": 0,
                                "fragment1_end": 250,
                                "fragment2_start": 440,
                                "fragment2_end": 690,
                                "similarity": 1.0000000000000009,
                                "code1": "\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 230,
                                "fragment1_end": 660,
                                "fragment2_start": 900,
                                "fragment2_end": 1100,
                                "similarity": 1.0000000000000007,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "class _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                            },
                            {
                                "fragment1_start": 640,
                                "fragment1_end": 760,
                                "fragment2_start": 1110,
                                "fragment2_end": 1200,
                                "similarity": 1.0000000000000002,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 740,
                                "fragment1_end": 990,
                                "fragment2_start": 1260,
                                "fragment2_end": 1430,
                                "similarity": 1.0000000000000007,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 970,
                                "fragment1_end": 990,
                                "fragment2_start": 1450,
                                "fragment2_end": 1470,
                                "similarity": 0.7108814122903837,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 970,
                                "fragment1_end": 1000,
                                "fragment2_start": 1490,
                                "fragment2_end": 1510,
                                "similarity": 1,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 980,
                                "fragment1_end": 1140,
                                "fragment2_start": 1530,
                                "fragment2_end": 1580,
                                "similarity": 1.0000000000000007,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1120,
                                "fragment1_end": 1270,
                                "fragment2_start": 1590,
                                "fragment2_end": 1710,
                                "similarity": 1.0000000000000009,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1250,
                                "fragment1_end": 1280,
                                "fragment2_start": 1800,
                                "fragment2_end": 1830,
                                "similarity": 1,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1260,
                                "fragment1_end": 1440,
                                "fragment2_start": 1880,
                                "fragment2_end": 1900,
                                "similarity": 1.0000000000000007,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                            },
                            {
                                "fragment1_start": 1420,
                                "fragment1_end": 1490,
                                "fragment2_start": 1910,
                                "fragment2_end": 1930,
                                "similarity": 1.0000000000000007,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1890,
                                "fragment1_end": 1920,
                                "fragment2_start": 0,
                                "fragment2_end": 30,
                                "similarity": 0.7493284865824371,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 2490,
                                "fragment1_end": 2510,
                                "fragment2_start": 390,
                                "fragment2_end": 410,
                                "similarity": 0.7149783475176564,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            }
                        ],
                        "ml_fragments": [
                            {
                                "type": "ml_block",
                                "block1": {
                                    "start_line": 0,
                                    "end_line": 50,
                                    "code": "var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; } class NodoListaTemporal { constructor(datTemporal) { this.datTemporal = datTemporal this.siguiente = null this.anterior = null } } var contadorglobal = 0 var salida = \"\" class ListaTemporal { constructor() { this.cabeza = null this.cola = null this.size = 0 } insertLista(dato) { let nodo = new NodoListaTemporal(dato); if (this.cabeza == null) { this.cabeza = nodo; this.cola = nodo; this.size++; } else if (this.cabeza != null) { let aux = this.cabeza; while (aux != this.cola) { aux = aux.siguiente; } aux.siguiente = nodo; nodo.anterior = aux this.cola = nodo; this.size++; } } eliminarLista(dato) { let nodo = this.cabeza if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) { this.cabeza = null this.cola = null this.size = 0 return } while (nodo.datTemporal != dato && nodo != this.cola) { nodo = nodo.siguiente } if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) { let tmp = nodo.siguiente this.cabeza = tmp tmp.anterior = null nodo.siguiente = null this.size-- return } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) { let tmp = nodo.siguiente tmp.anterior = nodo.anterior nodo.anterior.siguiente = tmp nodo.siguiente = null nodo.anterior = null this.size-- return } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) { let tmp = nodo.anterior this.cola = tmp tmp.siguiente = null nodo.anterior = null this.size-- return } if (nodo == null) { console.log(\"No se encontro el dato a eliminar\") return } } } var recarga = [] class Nodo { constructor(dato, izquierda, derecha, nodohijo) { this.dato = dato this.hash = null this.id = 0 this.nodohijo = nodohijo this.izquierda = izquierda this.derecha = derecha } } class MerkleTree { constructor() { this.raiz = null } insertar(dato) { let nodo = new Nodo(dato, null, null, true) if (this.raiz == null) { let listatmp = new ListaTemporal() listatmp.insertLista(nodo) listatmp.insertLista(new Nodo(-1, null, null, true)) this.construirArbol(listatmp) } else { let listatmp = this.ObtenerLista() listatmp.insertLista(nodo) this.construirArbol(listatmp) } this.hashing() contadorglobal = 0 } ObtenerLista() { let listatmp = new ListaTemporal() this.obtenerlista(listatmp, this.raiz.izquierda) this.obtenerlista(listatmp, this.raiz.derecha) return listatmp } obtenerlista(lista, nodo) { if (nodo != null) { this.obtenerlista(lista, nodo.izquierda) if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) { lista.insertLista(nodo) } this.obtenerlista(lista, nodo.derecha) } } construirArbol(lista) { let tamanio = new Float64Array(lista.size) let cant = 1 let operacion = tamanio.length / 2 while (operacion > 1) { cant++ operacion = operacion / 2 } let vectorTotal = new Float64Array(cant) let totalnodos = Math.pow(2, vectorTotal.length) while (lista.size < Math.floor(totalnodos)) { lista.insertLista(new Nodo(-1, null, null, true)) } while (lista.size > 1) { let primero = lista.cabeza let segundo = primero.siguiente lista.eliminarLista(primero.datTemporal) lista.eliminarLista(segundo.datTemporal) let nodo1 = primero.datTemporal nodo1.id = contadorglobal + 1 let nodo2 = segundo.datTemporal nodo2.id = contadorglobal + 2 let suma = nodo1.dato + nodo2.dato let nuevo = new Nodo(suma, nodo1, nodo2, false) nuevo.id = contadorglobal lista.insertLista(nuevo) contadorglobal = contadorglobal + 3 } this.raiz = lista.cabeza.datTemporal } hashing() { if (this.raiz == null) { console.log(\"No existe arbol\") return } this.subHashing(this.raiz) } subHashing(nodo) { if (nodo != null) { let hasheo = Sha256.hash(String(nodo.dato)) nodo.hash = hasheo this.subHashing(nodo.izquierda) this.subHashing(nodo.derecha) } } imprimiendo() { if (this.raiz == null) { console.log(\"No existe arbol\") return } this.imprimir(this.raiz) } imprimir(nodo) { if (nodo != null) { console.log(nodo.dato + \" Es el dato\") console.log(nodo.hash + \" Es el Hash\") this.imprimir(nodo.izquierda) this.imprimir(nodo.derecha) } } preOrden(nodo, vector) { if (nodo != null) { vector.push(nodo.dato) this.preOrden(nodo.izquierda, vector) this.preOrden(nodo.derecha, vector) } return vector } graficar(valorBuscar) { salida = \"\" if (this.raiz == null) { console.log(\"No hay nada aun\") return } let nodo = this.raiz let contador = 0 salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\" this.graficando(nodo, valorBuscar) salida += \"}\" contador = 0 d3.select(' .width(750) .height(400) .renderDot(salida) return console.log(salida) } graficando(nodo, valorBuscar) { if (nodo != null) { if (valorBuscar == nodo.dato) { salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\" \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\" } else { salida += \"node\" + nodo.id + \" [label = \\\" \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\" } if (nodo.derecha != null) { salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\" } if (nodo.izquierda != null) { salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\" } if (nodo.izquierda != null) { this.graficando(nodo.izquierda, valorBuscar) } if (nodo.derecha != null) { this.graficando(nodo.derecha, valorBuscar) } } } getMerkleRoot() { return this.raiz.hash } } let Transacciones = new MerkleTree() Transacciones.graficar(0)"
                                },
                                "block2": {
                                    "start_line": 0,
                                    "end_line": 50,
                                    "code": "import LinkedList from \"./linked_list.js\"; class _Node{ constructor(data,id){ this.data = data; this.left = this.right = null; this.id = `n${id}`; } } export default class MerkleTree{ constructor(){ this.root = null; this.dataBlocks = null; this.curr_block = null; this.junkBlocks = null; this.id = 0; } _fillDataBlocks(){ let n = 1; let powerOf2 = Math.pow(2,n); while(powerOf2 < this.dataBlocks.len){ n++; powerOf2 = Math.pow(2,n); } this.junkBlocks = new LinkedList(); for (let i = this.dataBlocks.len; i < powerOf2; i++) { this.junkBlocks.add(i*100); } return n; } genTree(list){ if(list.isEmpty()){ this.dataBlocks = list; this.curr_block = this.dataBlocks.head; const exp = this._fillDataBlocks(); this.root = new _Node(null, this.id++); this._genTreeRec(this.root, exp); this._genHash(this.root); } } _genTreeRec(root, exp){ if(exp > 0){ root.left = new _Node(null, this.id++); root.right = new _Node(null, this.id++); this._genTreeRec(root.left, exp-1); this._genTreeRec(root.right, exp-1); } else{ root.data = Sha256.hash(this.curr_block.data.toString()); if(this.curr_block.next){ this.curr_block = this.curr_block.next; } else{ this.curr_block = this.junkBlocks.head; } } } _genHash(root){ if(root == null){ return; } this._genHash(root.left); this._genHash(root.right); if(!root.data){ root.data = Sha256.hash(root.left.data + root.right.data); } } } var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; }"
                                },
                                "similarity": 0.7826109736901622,
                                "similarity_details": {
                                    "tfidf": 0.8135298074469223,
                                    "char_ngram": 0.70211477395347,
                                    "word_ngram": 0.46817214646738037,
                                    "embedding": 0.9646190404891968
                                }
                            }
                        ]
                    },
                    {
                        "file1": "-EDD_junio-Proyecto2_201800992-main\\js\\Arboles\\arbolMerkle.js",
                        "file2": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\block.js",
                        "token_similarity": 0.6657556641443445,
                        "ml_similarity": 0.7832133332332992,
                        "combined_similarity": 0.7127387317799264,
                        "is_plagiarism": false,
                        "plagiarism_probability": 0.6860685048265538,
                        "fragments": [
                            {
                                "fragment1_start": 0,
                                "fragment1_end": 20,
                                "fragment2_start": 280,
                                "fragment2_end": 300,
                                "similarity": 0.7727474779549475,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 0,
                                "fragment1_end": 1200,
                                "fragment2_start": 1520,
                                "fragment2_end": 1540,
                                "similarity": 0.9412181204694048,
                                "code1": "\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1180,
                                "fragment1_end": 1320,
                                "fragment2_start": 1630,
                                "fragment2_end": 1660,
                                "similarity": 0.9407070962311863,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1300,
                                "fragment1_end": 1480,
                                "fragment2_start": 1710,
                                "fragment2_end": 1760,
                                "similarity": 0.8763965607972026,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            },
                            {
                                "fragment1_start": 1570,
                                "fragment1_end": 1590,
                                "fragment2_start": 20,
                                "fragment2_end": 60,
                                "similarity": 0.7881012364506065,
                                "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                                "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                            }
                        ],
                        "ml_fragments": [
                            {
                                "type": "ml_block",
                                "block1": {
                                    "start_line": 0,
                                    "end_line": 50,
                                    "code": "var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; } class NodoListaTemporal { constructor(datTemporal) { this.datTemporal = datTemporal this.siguiente = null this.anterior = null } } var contadorglobal = 0 var salida = \"\" class ListaTemporal { constructor() { this.cabeza = null this.cola = null this.size = 0 } insertLista(dato) { let nodo = new NodoListaTemporal(dato); if (this.cabeza == null) { this.cabeza = nodo; this.cola = nodo; this.size++; } else if (this.cabeza != null) { let aux = this.cabeza; while (aux != this.cola) { aux = aux.siguiente; } aux.siguiente = nodo; nodo.anterior = aux this.cola = nodo; this.size++; } } eliminarLista(dato) { let nodo = this.cabeza if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) { this.cabeza = null this.cola = null this.size = 0 return } while (nodo.datTemporal != dato && nodo != this.cola) { nodo = nodo.siguiente } if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) { let tmp = nodo.siguiente this.cabeza = tmp tmp.anterior = null nodo.siguiente = null this.size-- return } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) { let tmp = nodo.siguiente tmp.anterior = nodo.anterior nodo.anterior.siguiente = tmp nodo.siguiente = null nodo.anterior = null this.size-- return } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) { let tmp = nodo.anterior this.cola = tmp tmp.siguiente = null nodo.anterior = null this.size-- return } if (nodo == null) { console.log(\"No se encontro el dato a eliminar\") return } } } var recarga = [] class Nodo { constructor(dato, izquierda, derecha, nodohijo) { this.dato = dato this.hash = null this.id = 0 this.nodohijo = nodohijo this.izquierda = izquierda this.derecha = derecha } } class MerkleTree { constructor() { this.raiz = null } insertar(dato) { let nodo = new Nodo(dato, null, null, true) if (this.raiz == null) { let listatmp = new ListaTemporal() listatmp.insertLista(nodo) listatmp.insertLista(new Nodo(-1, null, null, true)) this.construirArbol(listatmp) } else { let listatmp = this.ObtenerLista() listatmp.insertLista(nodo) this.construirArbol(listatmp) } this.hashing() contadorglobal = 0 } ObtenerLista() { let listatmp = new ListaTemporal() this.obtenerlista(listatmp, this.raiz.izquierda) this.obtenerlista(listatmp, this.raiz.derecha) return listatmp } obtenerlista(lista, nodo) { if (nodo != null) { this.obtenerlista(lista, nodo.izquierda) if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) { lista.insertLista(nodo) } this.obtenerlista(lista, nodo.derecha) } } construirArbol(lista) { let tamanio = new Float64Array(lista.size) let cant = 1 let operacion = tamanio.length / 2 while (operacion > 1) { cant++ operacion = operacion / 2 } let vectorTotal = new Float64Array(cant) let totalnodos = Math.pow(2, vectorTotal.length) while (lista.size < Math.floor(totalnodos)) { lista.insertLista(new Nodo(-1, null, null, true)) } while (lista.size > 1) { let primero = lista.cabeza let segundo = primero.siguiente lista.eliminarLista(primero.datTemporal) lista.eliminarLista(segundo.datTemporal) let nodo1 = primero.datTemporal nodo1.id = contadorglobal + 1 let nodo2 = segundo.datTemporal nodo2.id = contadorglobal + 2 let suma = nodo1.dato + nodo2.dato let nuevo = new Nodo(suma, nodo1, nodo2, false) nuevo.id = contadorglobal lista.insertLista(nuevo) contadorglobal = contadorglobal + 3 } this.raiz = lista.cabeza.datTemporal } hashing() { if (this.raiz == null) { console.log(\"No existe arbol\") return } this.subHashing(this.raiz) } subHashing(nodo) { if (nodo != null) { let hasheo = Sha256.hash(String(nodo.dato)) nodo.hash = hasheo this.subHashing(nodo.izquierda) this.subHashing(nodo.derecha) } } imprimiendo() { if (this.raiz == null) { console.log(\"No existe arbol\") return } this.imprimir(this.raiz) } imprimir(nodo) { if (nodo != null) { console.log(nodo.dato + \" Es el dato\") console.log(nodo.hash + \" Es el Hash\") this.imprimir(nodo.izquierda) this.imprimir(nodo.derecha) } } preOrden(nodo, vector) { if (nodo != null) { vector.push(nodo.dato) this.preOrden(nodo.izquierda, vector) this.preOrden(nodo.derecha, vector) } return vector } graficar(valorBuscar) { salida = \"\" if (this.raiz == null) { console.log(\"No hay nada aun\") return } let nodo = this.raiz let contador = 0 salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\" this.graficando(nodo, valorBuscar) salida += \"}\" contador = 0 d3.select(' .width(750) .height(400) .renderDot(salida) return console.log(salida) } graficando(nodo, valorBuscar) { if (nodo != null) { if (valorBuscar == nodo.dato) { salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\" \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\" } else { salida += \"node\" + nodo.id + \" [label = \\\" \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\" } if (nodo.derecha != null) { salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\" } if (nodo.izquierda != null) { salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\" } if (nodo.izquierda != null) { this.graficando(nodo.izquierda, valorBuscar) } if (nodo.derecha != null) { this.graficando(nodo.derecha, valorBuscar) } } } getMerkleRoot() { return this.raiz.hash } } let Transacciones = new MerkleTree() Transacciones.graficar(0)"
                                },
                                "block2": {
                                    "start_line": 0,
                                    "end_line": 50,
                                    "code": "import LinkedList from \"../data_structs/linked_list.js\"; class _Block{ constructor({ index, timeStamp, prevHash, rootMerkle, data, }){ this.index = index; this.timeStamp = timeStamp; this.prevHash = prevHash; this.rootMerkle = rootMerkle; this.data = data; this.hash = this._genHash(); this.nonce = 0; this._proofOfWork(); } _proofOfWork(){ while(!this.hash.startsWith('00')){ this.nonce++; this.hash = this._genHash(); } } _genHash(){ return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce); } toString(){ return ` bloque: ${this.index}\\\\n hash: ${this.hash}\\\\n nonce: ${this.nonce}\\\\n prev: ${this.prevHash}\\\\n rootMerkle: ${this.rootMerkle}\\\\n transacciones:\\\\n ${this.data} timeStamp: ${this.timeStamp} `; } } export default class BlockChain{ constructor(){ this.blocks = new LinkedList(); this.index = 0; } genNewBlock(timeStamp, root, list){ const data = { index: this.index++, timeStamp: timeStamp, prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '', rootMerkle: root, data: list, }; this.blocks.add(new _Block(data)); } } var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; }"
                                },
                                "similarity": 0.7832133332332992,
                                "similarity_details": {
                                    "tfidf": 0.8028736418297481,
                                    "char_ngram": 0.6825066322237517,
                                    "word_ngram": 0.48358712367656415,
                                    "embedding": 0.9735496044158936
                                }
                            }
                        ]
                    }
                ]
            }
        ],
        "detailed_pairs": [
            {
                "file1": {
                    "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                    "path": "-EDD_junio-Proyecto2_201800992-main\\js\\BlockChain\\blockChain.js",
                    "full_path": "C:\\Users\\gian-\\AppData\\Local\\Temp\\plagiarism_checker\\323c8304-f54c-4baa-a6a4-eefec5065d1f\\extracted_-EDD_junio-Proyecto2_201800992-main\\-EDD_junio-Proyecto2_201800992-main\\js\\BlockChain\\blockChain.js"
                },
                "file2": {
                    "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                    "path": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\block.js",
                    "full_path": "C:\\Users\\gian-\\AppData\\Local\\Temp\\plagiarism_checker\\323c8304-f54c-4baa-a6a4-eefec5065d1f\\extracted_-EDD_junio-Proyecto2_201801178-main\\-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\block.js"
                },
                "token_similarity": 0.7660278148232484,
                "token_similarity_details": {
                    "lcs": 0.7007984969469234,
                    "sequence_matcher": 0.7655207798871216,
                    "ngram": 0.8505392912172574,
                    "levenshtein": 0.5512993721687991,
                    "tfidf_cosine": 0.9904826612897049,
                    "winnowing": 0.6761565836298933
                },
                "ml_similarity": 0.8959310634607047,
                "ml_similarity_details": {
                    "tfidf": 0.91361488423569,
                    "char_ngram": 0.9145146556404588,
                    "word_ngram": 0.7044265089909426,
                    "embedding": 0.9735496044158936
                },
                "combined_similarity": 0.817989114278231,
                "similar_fragments": [
                    {
                        "fragment1": [
                            0,
                            20
                        ],
                        "fragment2": [
                            280,
                            300
                        ],
                        "similarity": 0.7727474779549475,
                        "tokens1": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "ID_Identifier",
                            "=",
                            "("
                        ],
                        "tokens2": [
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "ID_Identifier",
                            "=",
                            "(",
                            "typeof",
                            "ID_Identifier",
                            "=="
                        ],
                        "similarity_details": {
                            "lcs": 0.85,
                            "sequence_matcher": 0.85,
                            "ngram": 0.8333333333333334,
                            "levenshtein": 0.6451612903225806,
                            "tfidf_cosine": 0.8602427661188232,
                            "winnowing": 0.5
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            0,
                            1200
                        ],
                        "fragment2": [
                            1520,
                            1540
                        ],
                        "similarity": 0.9412181204694048,
                        "tokens1": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "ID_Identifier",
                            "=",
                            "("
                        ],
                        "tokens2": [
                            ";",
                            "}",
                            "var",
                            "ID_Identifier",
                            "=",
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "="
                        ],
                        "similarity_details": {
                            "lcs": 0.85,
                            "sequence_matcher": 0.85,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.8083333333333333,
                            "tfidf_cosine": 0.8000834850559742,
                            "winnowing": 0.25
                        },
                        "code1": "\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1180,
                            1320
                        ],
                        "fragment2": [
                            1630,
                            1660
                        ],
                        "similarity": 0.9407070962311863,
                        "tokens1": [
                            "ID_Identifier",
                            "&",
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "=",
                            "\"\"",
                            ","
                        ],
                        "tokens2": [
                            ";",
                            "}",
                            ")",
                            ";",
                            "return",
                            "ID_Identifier",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "="
                        ],
                        "similarity_details": {
                            "lcs": 0.75,
                            "sequence_matcher": 0.75,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.8264462809917356,
                            "tfidf_cosine": 0.7380386116058992,
                            "winnowing": 0.5
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1300,
                            1480
                        ],
                        "fragment2": [
                            1710,
                            1760
                        ],
                        "similarity": 0.8763965607972026,
                        "tokens1": [
                            ")",
                            ";",
                            "}",
                            ")",
                            ";",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u0800-\\uffff]/g",
                            ",",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            ")",
                            ";",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u00c0-\\u00df][\\u0080-\\u00bf]/g",
                            ",",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var"
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.7777777777777778,
                            "levenshtein": 0.6642857142857144,
                            "tfidf_cosine": 0.8426362202458457,
                            "winnowing": 0.3333333333333333
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1650,
                            1670
                        ],
                        "fragment2": [
                            120,
                            140
                        ],
                        "similarity": 0.7536076945309456,
                        "tokens1": [
                            "ID_Identifier",
                            "=",
                            "this",
                            ".",
                            "ID_Identifier",
                            "+",
                            "this",
                            ".",
                            "ID_Identifier",
                            "+",
                            "this",
                            ".",
                            "ID_Identifier",
                            "+",
                            "this",
                            ".",
                            "ID_Identifier",
                            "while",
                            "(",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "this",
                            ".",
                            "ID_Identifier",
                            "+",
                            "this",
                            ".",
                            "ID_Identifier",
                            "+",
                            "this",
                            ".",
                            "ID_Identifier",
                            "+",
                            "this",
                            ".",
                            "ID_Identifier",
                            "+",
                            "this",
                            ".",
                            "ID_Identifier",
                            ")"
                        ],
                        "similarity_details": {
                            "lcs": 0.8,
                            "sequence_matcher": 0.8,
                            "ngram": 0.7222222222222222,
                            "levenshtein": 0.8110236220472441,
                            "tfidf_cosine": 0.9097926283852613,
                            "winnowing": 0.25
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;"
                    },
                    {
                        "fragment1": [
                            1750,
                            1790
                        ],
                        "fragment2": [
                            20,
                            60
                        ],
                        "similarity": 0.9765058852081059,
                        "tokens1": [
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            ",",
                            "}",
                            ")",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "="
                        ],
                        "similarity_details": {
                            "lcs": 0.75,
                            "sequence_matcher": 0.75,
                            "ngram": 0.7777777777777778,
                            "levenshtein": 0.7575757575757576,
                            "tfidf_cosine": 0.9055564254530828,
                            "winnowing": 1
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1860,
                            1880
                        ],
                        "fragment2": [
                            230,
                            250
                        ],
                        "similarity": 0.7333905011867399,
                        "tokens1": [
                            "(",
                            "this",
                            ".",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            ",",
                            "this",
                            ".",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            ",",
                            "this",
                            ".",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            ",",
                            "this"
                        ],
                        "tokens2": [
                            "(",
                            "this",
                            ".",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            ")",
                            ")",
                            "?",
                            "this",
                            ".",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            ":"
                        ],
                        "similarity_details": {
                            "lcs": 0.75,
                            "sequence_matcher": 0.75,
                            "ngram": 0.5,
                            "levenshtein": 0.8373983739837398,
                            "tfidf_cosine": 0.7045541319499595,
                            "winnowing": 1
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                    }
                ],
                "ml_fragments": [
                    {
                        "type": "ml_block",
                        "block1": {
                            "start_line": 0,
                            "end_line": 50,
                            "code": "var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; } class Bloque { constructor() { this.id = 0; this.timestamp = \"\"; this.nonce = 0 this.preHash = \"\" this.rootMerkle = \"\" this.hash = \"\" } setdataTime = () => { var today = new Date(); var dd = String(today.getDate()).padStart(2, '0'); var mm = String(today.getMonth() + 1).padStart(2, '0'); var yyyy = today.getFullYear(); var nowh = today.toLocaleTimeString('en-US') today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh; return today } crearBloque = (merkleRoot) => { this.rootMerkle = merkleRoot var flag = true; this.timestamp = this.setdataTime() let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot while (flag) { let aux = (cambiarDatos + this.nonce) this.hash = Sha256.hash(aux) if (this.hash.substring(0, 2) == ! \"00\") { this.preHash = this.hash flag = false } this.nonce++ } this.id++ } } class NodoBlock { constructor(idblock, hash, preHash, merkleRoot, data, fecha) { this.idblock = idblock; this.hash = hash; this.preHash = preHash; this.merkleRoot = merkleRoot; this.data = data; this.fecha = fecha; this.siguiente = null; console.log(\"++++++\"+this.data) } } class BlockChain { constructor() { this.raiz = null; this.ultimo = null this.bloque = new Bloque() } insertar = (data,merkleroot ) => { console.log(\"-------------\" + data) this.bloque.crearBloque(merkleroot) let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp) if (this.raiz == null) { this.raiz = this.ultimo = nuevo } else { this.ultimo.siguiente = nuevo this.ultimo = nuevo } } graph = () => { var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\"; var temp = this.raiz var nodes = \"\"; var conexiones = \"\"; var Nnode = 0; while (temp != null) { nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\"; if (temp.siguiente != null) { var auxnum = Nnode + 1; conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\"; } temp = temp.siguiente Nnode++; } codigodot += \" codigodot += nodes + \"\\n\" codigodot += \" codigodot += \"\\n\" + conexiones + \"\\n}\\n}\" var svg = d3.select(' .width(500) .height(200) .renderDot(codigodot) return console.log(codigodot) } } let block = new BlockChain()"
                        },
                        "block2": {
                            "start_line": 0,
                            "end_line": 50,
                            "code": "import LinkedList from \"../data_structs/linked_list.js\"; class _Block{ constructor({ index, timeStamp, prevHash, rootMerkle, data, }){ this.index = index; this.timeStamp = timeStamp; this.prevHash = prevHash; this.rootMerkle = rootMerkle; this.data = data; this.hash = this._genHash(); this.nonce = 0; this._proofOfWork(); } _proofOfWork(){ while(!this.hash.startsWith('00')){ this.nonce++; this.hash = this._genHash(); } } _genHash(){ return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce); } toString(){ return ` bloque: ${this.index}\\\\n hash: ${this.hash}\\\\n nonce: ${this.nonce}\\\\n prev: ${this.prevHash}\\\\n rootMerkle: ${this.rootMerkle}\\\\n transacciones:\\\\n ${this.data} timeStamp: ${this.timeStamp} `; } } export default class BlockChain{ constructor(){ this.blocks = new LinkedList(); this.index = 0; } genNewBlock(timeStamp, root, list){ const data = { index: this.index++, timeStamp: timeStamp, prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '', rootMerkle: root, data: list, }; this.blocks.add(new _Block(data)); } } var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; }"
                        },
                        "similarity": 0.8959310634607047,
                        "similarity_details": {
                            "tfidf": 0.91361488423569,
                            "char_ngram": 0.9145146556404588,
                            "word_ngram": 0.7044265089909426,
                            "embedding": 0.9735496044158936
                        }
                    }
                ],
                "is_plagiarism": true,
                "plagiarism_probability": 0.8040902838422685,
                "all_features": {
                    "lcs": 0.7007984969469234,
                    "sequence_matcher": 0.7655207798871216,
                    "ngram": 0.8505392912172574,
                    "levenshtein": 0.5512993721687991,
                    "tfidf_cosine": 0.9904826612897049,
                    "winnowing": 0.6761565836298933,
                    "ml_tfidf": 0.91361488423569,
                    "ml_char_ngram": 0.9145146556404588,
                    "ml_word_ngram": 0.7044265089909426,
                    "ml_embedding": 0.9735496044158936
                }
            },
            {
                "file1": {
                    "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                    "path": "-EDD_junio-Proyecto2_201800992-main\\js\\BlockChain\\blockChain.js",
                    "full_path": "C:\\Users\\gian-\\AppData\\Local\\Temp\\plagiarism_checker\\323c8304-f54c-4baa-a6a4-eefec5065d1f\\extracted_-EDD_junio-Proyecto2_201800992-main\\-EDD_junio-Proyecto2_201800992-main\\js\\BlockChain\\blockChain.js"
                },
                "file2": {
                    "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                    "path": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\merkle.js",
                    "full_path": "C:\\Users\\gian-\\AppData\\Local\\Temp\\plagiarism_checker\\323c8304-f54c-4baa-a6a4-eefec5065d1f\\extracted_-EDD_junio-Proyecto2_201801178-main\\-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\merkle.js"
                },
                "token_similarity": 0.7658276814671913,
                "token_similarity_details": {
                    "lcs": 0.7007984969469234,
                    "sequence_matcher": 0.7347943856193055,
                    "ngram": 0.8582696573823022,
                    "levenshtein": 0.5665580545180005,
                    "tfidf_cosine": 0.9913484278771787,
                    "winnowing": 0.6725352112676056
                },
                "ml_similarity": 0.8820938949638769,
                "ml_similarity_details": {
                    "tfidf": 0.9089436926233514,
                    "char_ngram": 0.8970035633389773,
                    "word_ngram": 0.6752840782740173,
                    "embedding": 0.9646190404891968
                },
                "combined_similarity": 0.8123341668658655,
                "similar_fragments": [
                    {
                        "fragment1": [
                            0,
                            250
                        ],
                        "fragment2": [
                            440,
                            690
                        ],
                        "similarity": 1.0000000000000009,
                        "tokens1": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "ID_Identifier",
                            "=",
                            "("
                        ],
                        "tokens2": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "ID_Identifier",
                            "=",
                            "("
                        ],
                        "similarity_details": {
                            "lcs": 1,
                            "sequence_matcher": 1,
                            "ngram": 1,
                            "levenshtein": 1,
                            "tfidf_cosine": 1,
                            "winnowing": 1
                        },
                        "code1": "\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            230,
                            660
                        ],
                        "fragment2": [
                            900,
                            1100
                        ],
                        "similarity": 1.0000000000000007,
                        "tokens1": [
                            "ID_Identifier",
                            "=",
                            "new",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ")",
                            ";",
                            "for",
                            "(",
                            "var",
                            "ID_Identifier",
                            "=",
                            "0",
                            ";",
                            "ID_Identifier",
                            "<",
                            "ID_Identifier",
                            ";",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ";",
                            "for",
                            "(",
                            "var",
                            "ID_Identifier",
                            "=",
                            "0",
                            ";",
                            "ID_Identifier",
                            "<",
                            "ID_Identifier",
                            ";",
                            "ID_Identifier",
                            "++",
                            ")"
                        ],
                        "similarity_details": {
                            "lcs": 0.8,
                            "sequence_matcher": 0.8,
                            "ngram": 0.6111111111111112,
                            "levenshtein": 0.8992248062015504,
                            "tfidf_cosine": 0.7048900819879953,
                            "winnowing": 1
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "class _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                    },
                    {
                        "fragment1": [
                            640,
                            760
                        ],
                        "fragment2": [
                            1110,
                            1200
                        ],
                        "similarity": 1.0000000000000002,
                        "tokens1": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            "+",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ")",
                            "+",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ","
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            "]",
                            ";",
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ")",
                            "+",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier"
                        ],
                        "similarity_details": {
                            "lcs": 0.85,
                            "sequence_matcher": 0.85,
                            "ngram": 0.7777777777777778,
                            "levenshtein": 0.9060402684563759,
                            "tfidf_cosine": 0.9032400268543423,
                            "winnowing": 0.6666666666666666
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            740,
                            990
                        ],
                        "fragment2": [
                            1260,
                            1430
                        ],
                        "similarity": 1.0000000000000007,
                        "tokens1": [
                            "[",
                            "0",
                            "]",
                            "=",
                            "(",
                            "ID_Identifier",
                            "[",
                            "0",
                            "]",
                            "+",
                            "ID_Identifier",
                            ")",
                            "&",
                            "0xffffffff",
                            ";",
                            "ID_Identifier",
                            "[",
                            "1",
                            "]",
                            "="
                        ],
                        "tokens2": [
                            "[",
                            "5",
                            "]",
                            "=",
                            "(",
                            "ID_Identifier",
                            "[",
                            "5",
                            "]",
                            "+",
                            "ID_Identifier",
                            ")",
                            "&",
                            "0xffffffff",
                            ";",
                            "ID_Identifier",
                            "[",
                            "6",
                            "]",
                            "="
                        ],
                        "similarity_details": {
                            "lcs": 0.85,
                            "sequence_matcher": 0.85,
                            "ngram": 0.5555555555555556,
                            "levenshtein": 0.9642857142857143,
                            "tfidf_cosine": 0.5644570020409767,
                            "winnowing": 0.3333333333333333
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            970,
                            990
                        ],
                        "fragment2": [
                            1450,
                            1470
                        ],
                        "similarity": 0.7108814122903837,
                        "tokens1": [
                            "<<",
                            "(",
                            "32",
                            "-",
                            "ID_Identifier",
                            ")",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "(",
                            "22",
                            ",",
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier"
                        ],
                        "similarity_details": {
                            "lcs": 0.8,
                            "sequence_matcher": 0.8,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.814516129032258,
                            "tfidf_cosine": 0.7482242657529938,
                            "winnowing": 0.25
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            970,
                            1000
                        ],
                        "fragment2": [
                            1490,
                            1510
                        ],
                        "similarity": 1,
                        "tokens1": [
                            "<<",
                            "(",
                            "32",
                            "-",
                            "ID_Identifier",
                            ")",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            ",",
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "7"
                        ],
                        "similarity_details": {
                            "lcs": 0.75,
                            "sequence_matcher": 0.75,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.7479674796747968,
                            "tfidf_cosine": 0.7482242657529938,
                            "winnowing": 0.5
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            980,
                            1140
                        ],
                        "fragment2": [
                            1530,
                            1580
                        ],
                        "similarity": 1.0000000000000007,
                        "tokens1": [
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "2",
                            ",",
                            "ID_Identifier",
                            ")",
                            "^",
                            "ID_Identifier",
                            "."
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "17",
                            ",",
                            "ID_Identifier",
                            ")",
                            "^",
                            "ID_Identifier"
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.7777777777777778,
                            "levenshtein": 0.8676470588235294,
                            "tfidf_cosine": 0.8752690307575414,
                            "winnowing": 0.6666666666666666
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1120,
                            1270
                        ],
                        "fragment2": [
                            1590,
                            1710
                        ],
                        "similarity": 1.0000000000000009,
                        "tokens1": [
                            ">>>",
                            "10",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "("
                        ],
                        "tokens2": [
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "(",
                            "ID_Identifier",
                            "&"
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.8888888888888888,
                            "levenshtein": 0.8130081300813008,
                            "tfidf_cosine": 0.8922288908197358,
                            "winnowing": 0.5
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1250,
                            1280
                        ],
                        "fragment2": [
                            1800,
                            1830
                        ],
                        "similarity": 1,
                        "tokens1": [
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u0080-\\u07ff]/g",
                            ",",
                            "function"
                        ],
                        "tokens2": [
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g",
                            ",",
                            "function"
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.7777777777777778,
                            "levenshtein": 0.8160919540229885,
                            "tfidf_cosine": 0.8409526812426942,
                            "winnowing": 1
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1260,
                            1440
                        ],
                        "fragment2": [
                            1880,
                            1900
                        ],
                        "similarity": 1.0000000000000007,
                        "tokens1": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u0080-\\u07ff]/g",
                            ",",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u00c0-\\u00df][\\u0080-\\u00bf]/g",
                            ",",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "=",
                            "(",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "("
                        ],
                        "similarity_details": {
                            "lcs": 0.85,
                            "sequence_matcher": 0.85,
                            "ngram": 0.6111111111111112,
                            "levenshtein": 0.8157894736842105,
                            "tfidf_cosine": 0.7944040067626077,
                            "winnowing": 0.3333333333333333
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                    },
                    {
                        "fragment1": [
                            1420,
                            1510
                        ],
                        "fragment2": [
                            1910,
                            1930
                        ],
                        "similarity": 1.0000000000000007,
                        "tokens1": [
                            "ID_Identifier",
                            "(",
                            "2",
                            ")",
                            "&",
                            "0x3f",
                            ")",
                            ";",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            ")",
                            ";",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            "(",
                            "1",
                            ")",
                            "&",
                            "0x3f",
                            ";",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            ")",
                            ";",
                            "return",
                            "ID_Identifier"
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.9107142857142857,
                            "tfidf_cosine": 0.8000972810214388,
                            "winnowing": 0.14285714285714285
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1740,
                            1790
                        ],
                        "fragment2": [
                            10,
                            30
                        ],
                        "similarity": 0.7258866455167113,
                        "tokens1": [
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "null"
                        ],
                        "similarity_details": {
                            "lcs": 0.8,
                            "sequence_matcher": 0.8,
                            "ngram": 0.7222222222222222,
                            "levenshtein": 0.7021276595744681,
                            "tfidf_cosine": 0.8384166791201993,
                            "winnowing": 0.3333333333333333
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;"
                    },
                    {
                        "fragment1": [
                            1800,
                            1830
                        ],
                        "fragment2": [
                            40,
                            70
                        ],
                        "similarity": 0.8471718503999901,
                        "tokens1": [
                            ")",
                            "}",
                            "}",
                            "class",
                            "ID_Identifier",
                            "{",
                            "ID_Identifier",
                            "(",
                            ")",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "null",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "="
                        ],
                        "tokens2": [
                            "}",
                            "export",
                            "default",
                            "class",
                            "ID_Identifier",
                            "{",
                            "ID_Identifier",
                            "(",
                            ")",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "null",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "="
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.8333333333333334,
                            "levenshtein": 0.8738738738738738,
                            "tfidf_cosine": 0.8453187114594095,
                            "winnowing": 0.6666666666666666
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1900,
                            1920
                        ],
                        "fragment2": [
                            350,
                            370
                        ],
                        "similarity": 0.716698972693261,
                        "tokens1": [
                            ")",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            "}",
                            "else",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "="
                        ],
                        "tokens2": [
                            ".",
                            "ID_Identifier",
                            "=",
                            "this",
                            ".",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            ";",
                            "}",
                            "else",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "this",
                            ".",
                            "ID_Identifier",
                            "."
                        ],
                        "similarity_details": {
                            "lcs": 0.75,
                            "sequence_matcher": 0.45,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.8198198198198199,
                            "tfidf_cosine": 0.863675043646485,
                            "winnowing": 0.6666666666666666
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\nclass Bloque {\n    constructor() {\n        this.id = 0;\n        this.timestamp = \"\";\n        this.nonce = 0\n        this.preHash = \"\"\n        this.rootMerkle = \"\"\n        this.hash = \"\"\n\n    }\n\n\n    setdataTime = () => {\n        var today = new Date();\n        var dd = String(today.getDate()).padStart(2, '0');\n        var mm = String(today.getMonth() + 1).padStart(2, '0');\n        var yyyy = today.getFullYear();\n        var nowh = today.toLocaleTimeString('en-US')\n        today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh;\n        return today\n    }\n\n\n\n    crearBloque = (merkleRoot) => {\n        this.rootMerkle = merkleRoot\n\n        var flag = true;\n        this.timestamp = this.setdataTime()\n        let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot\n        while (flag) {\n            let aux = (cambiarDatos + this.nonce)\n            this.hash = Sha256.hash(aux)\n            if (this.hash.substring(0, 2) == ! \"00\") {\n                this.preHash = this.hash\n                flag = false\n            }\n            this.nonce++\n        }\n\n\n\n        this.id++\n\n    }\n}\n\nclass NodoBlock {\n    constructor(idblock, hash, preHash, merkleRoot, data, fecha) {\n        this.idblock = idblock;\n        this.hash = hash;\n        this.preHash = preHash;\n        this.merkleRoot = merkleRoot;\n        this.data = data;\n        this.fecha = fecha;\n        this.siguiente = null;\n        console.log(\"++++++\"+this.data)\n    }\n}\n\nclass BlockChain {\n    constructor() {\n        this.raiz = null;\n        this.ultimo = null\n        this.bloque = new Bloque()\n    }\n\n    insertar = (data,merkleroot ) => {\n        console.log(\"-------------\" + data)\n        this.bloque.crearBloque(merkleroot)\n       \n        let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp)\n        if (this.raiz == null) {\n            this.raiz = this.ultimo = nuevo\n        } else {\n            this.ultimo.siguiente = nuevo\n            this.ultimo = nuevo\n        }\n    }\n    graph = () => {\n        var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\";\n        var temp = this.raiz\n        var nodes = \"\";\n        var conexiones = \"\";\n        var Nnode = 0;\n\n        while (temp != null) {\n            nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\";\n            if (temp.siguiente != null) {\n                var auxnum = Nnode + 1;\n                conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\";\n            }\n            temp = temp.siguiente\n            Nnode++;\n        }\n        codigodot += \"//agregando nodos\\n\"\n        codigodot += nodes + \"\\n\"\n        codigodot += \"//agregando conexiones o flechas\\n\"\n        codigodot += \"\\n\" + conexiones + \"\\n}\\n}\"\n        \n        var svg = d3.select('#blockChain1').graphviz()\n            .width(500)\n            .height(200)\n            .renderDot(codigodot)\n            return console.log(codigodot)\n    }\n}\n\nlet block = new BlockChain()\n",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                    }
                ],
                "ml_fragments": [
                    {
                        "type": "ml_block",
                        "block1": {
                            "start_line": 0,
                            "end_line": 50,
                            "code": "var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; } class Bloque { constructor() { this.id = 0; this.timestamp = \"\"; this.nonce = 0 this.preHash = \"\" this.rootMerkle = \"\" this.hash = \"\" } setdataTime = () => { var today = new Date(); var dd = String(today.getDate()).padStart(2, '0'); var mm = String(today.getMonth() + 1).padStart(2, '0'); var yyyy = today.getFullYear(); var nowh = today.toLocaleTimeString('en-US') today = dd + '-' + mm + '-' + yyyy + \"-::\" + nowh; return today } crearBloque = (merkleRoot) => { this.rootMerkle = merkleRoot var flag = true; this.timestamp = this.setdataTime() let cambiarDatos = this.id + this.timestamp + this.preHash + this.merkleRoot while (flag) { let aux = (cambiarDatos + this.nonce) this.hash = Sha256.hash(aux) if (this.hash.substring(0, 2) == ! \"00\") { this.preHash = this.hash flag = false } this.nonce++ } this.id++ } } class NodoBlock { constructor(idblock, hash, preHash, merkleRoot, data, fecha) { this.idblock = idblock; this.hash = hash; this.preHash = preHash; this.merkleRoot = merkleRoot; this.data = data; this.fecha = fecha; this.siguiente = null; console.log(\"++++++\"+this.data) } } class BlockChain { constructor() { this.raiz = null; this.ultimo = null this.bloque = new Bloque() } insertar = (data,merkleroot ) => { console.log(\"-------------\" + data) this.bloque.crearBloque(merkleroot) let nuevo = new NodoBlock(this.bloque.id, this.bloque.hash, this.bloque.preHash, this.bloque.rootMerkle, data, this.bloque.timestamp) if (this.raiz == null) { this.raiz = this.ultimo = nuevo } else { this.ultimo.siguiente = nuevo this.ultimo = nuevo } } graph = () => { var codigodot = \"digraph G{\\nbgcolor=none\\nrankdir=LR;\\nlabel=\\\" Usuarios \\\";\\nnode [shape=box];\\n nodesep=1;\\n\" + \"node [shape=record fontname=Arial]\\n;\"; var temp = this.raiz var nodes = \"\"; var conexiones = \"\"; var Nnode = 0; while (temp != null) { nodes += \"N\" + Nnode + \" [label=\\\"\" + \"\\\\n\" + \"ID: \"+temp.idblock + \"\\\\n\" + \"HASH: \"+temp.hash + \"\\\\n\" + \"PreHash: \"+temp.preHash + \"\\\\n\" +\"MerkleRoot: \" +temp.merkleRoot + \"\\\\n\" + \"Data: \"+temp.data + \"\\\\n\" +\"Fecha: \"+ temp.fecha + \"\\\\n\" + \"\\\"];\\n\"; if (temp.siguiente != null) { var auxnum = Nnode + 1; conexiones += \"N\" + Nnode + \" -> N\" + auxnum + \";\\n\"; } temp = temp.siguiente Nnode++; } codigodot += \" codigodot += nodes + \"\\n\" codigodot += \" codigodot += \"\\n\" + conexiones + \"\\n}\\n}\" var svg = d3.select(' .width(500) .height(200) .renderDot(codigodot) return console.log(codigodot) } } let block = new BlockChain()"
                        },
                        "block2": {
                            "start_line": 0,
                            "end_line": 50,
                            "code": "import LinkedList from \"./linked_list.js\"; class _Node{ constructor(data,id){ this.data = data; this.left = this.right = null; this.id = `n${id}`; } } export default class MerkleTree{ constructor(){ this.root = null; this.dataBlocks = null; this.curr_block = null; this.junkBlocks = null; this.id = 0; } _fillDataBlocks(){ let n = 1; let powerOf2 = Math.pow(2,n); while(powerOf2 < this.dataBlocks.len){ n++; powerOf2 = Math.pow(2,n); } this.junkBlocks = new LinkedList(); for (let i = this.dataBlocks.len; i < powerOf2; i++) { this.junkBlocks.add(i*100); } return n; } genTree(list){ if(list.isEmpty()){ this.dataBlocks = list; this.curr_block = this.dataBlocks.head; const exp = this._fillDataBlocks(); this.root = new _Node(null, this.id++); this._genTreeRec(this.root, exp); this._genHash(this.root); } } _genTreeRec(root, exp){ if(exp > 0){ root.left = new _Node(null, this.id++); root.right = new _Node(null, this.id++); this._genTreeRec(root.left, exp-1); this._genTreeRec(root.right, exp-1); } else{ root.data = Sha256.hash(this.curr_block.data.toString()); if(this.curr_block.next){ this.curr_block = this.curr_block.next; } else{ this.curr_block = this.junkBlocks.head; } } } _genHash(root){ if(root == null){ return; } this._genHash(root.left); this._genHash(root.right); if(!root.data){ root.data = Sha256.hash(root.left.data + root.right.data); } } } var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; }"
                        },
                        "similarity": 0.8820938949638769,
                        "similarity_details": {
                            "tfidf": 0.9089436926233514,
                            "char_ngram": 0.8970035633389773,
                            "word_ngram": 0.6752840782740173,
                            "embedding": 0.9646190404891968
                        }
                    }
                ],
                "is_plagiarism": true,
                "plagiarism_probability": 0.7970154608336859,
                "all_features": {
                    "lcs": 0.7007984969469234,
                    "sequence_matcher": 0.7347943856193055,
                    "ngram": 0.8582696573823022,
                    "levenshtein": 0.5665580545180005,
                    "tfidf_cosine": 0.9913484278771787,
                    "winnowing": 0.6725352112676056,
                    "ml_tfidf": 0.9089436926233514,
                    "ml_char_ngram": 0.8970035633389773,
                    "ml_word_ngram": 0.6752840782740173,
                    "ml_embedding": 0.9646190404891968
                }
            },
            {
                "file1": {
                    "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                    "path": "-EDD_junio-Proyecto2_201800992-main\\js\\Arboles\\arbolMerkle.js",
                    "full_path": "C:\\Users\\gian-\\AppData\\Local\\Temp\\plagiarism_checker\\323c8304-f54c-4baa-a6a4-eefec5065d1f\\extracted_-EDD_junio-Proyecto2_201800992-main\\-EDD_junio-Proyecto2_201800992-main\\js\\Arboles\\arbolMerkle.js"
                },
                "file2": {
                    "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                    "path": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\merkle.js",
                    "full_path": "C:\\Users\\gian-\\AppData\\Local\\Temp\\plagiarism_checker\\323c8304-f54c-4baa-a6a4-eefec5065d1f\\extracted_-EDD_junio-Proyecto2_201801178-main\\-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\merkle.js"
                },
                "token_similarity": 0.681456263861494,
                "token_similarity_details": {
                    "lcs": 0.5259076489249207,
                    "sequence_matcher": 0.6257076955336549,
                    "ngram": 0.7492130115424974,
                    "levenshtein": 0.5059020946649693,
                    "tfidf_cosine": 0.9787062770831157,
                    "winnowing": 0.6194968553459119
                },
                "ml_similarity": 0.7826109736901622,
                "ml_similarity_details": {
                    "tfidf": 0.8135298074469223,
                    "char_ngram": 0.70211477395347,
                    "word_ngram": 0.46817214646738037,
                    "embedding": 0.9646190404891968
                },
                "combined_similarity": 0.7219181477929613,
                "similar_fragments": [
                    {
                        "fragment1": [
                            0,
                            250
                        ],
                        "fragment2": [
                            440,
                            690
                        ],
                        "similarity": 1.0000000000000009,
                        "tokens1": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "ID_Identifier",
                            "=",
                            "("
                        ],
                        "tokens2": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "ID_Identifier",
                            "=",
                            "("
                        ],
                        "similarity_details": {
                            "lcs": 1,
                            "sequence_matcher": 1,
                            "ngram": 1,
                            "levenshtein": 1,
                            "tfidf_cosine": 1,
                            "winnowing": 1
                        },
                        "code1": "\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            230,
                            660
                        ],
                        "fragment2": [
                            900,
                            1100
                        ],
                        "similarity": 1.0000000000000007,
                        "tokens1": [
                            "ID_Identifier",
                            "=",
                            "new",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ")",
                            ";",
                            "for",
                            "(",
                            "var",
                            "ID_Identifier",
                            "=",
                            "0",
                            ";",
                            "ID_Identifier",
                            "<",
                            "ID_Identifier",
                            ";",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ";",
                            "for",
                            "(",
                            "var",
                            "ID_Identifier",
                            "=",
                            "0",
                            ";",
                            "ID_Identifier",
                            "<",
                            "ID_Identifier",
                            ";",
                            "ID_Identifier",
                            "++",
                            ")"
                        ],
                        "similarity_details": {
                            "lcs": 0.8,
                            "sequence_matcher": 0.8,
                            "ngram": 0.6111111111111112,
                            "levenshtein": 0.8992248062015504,
                            "tfidf_cosine": 0.7048900819879953,
                            "winnowing": 1
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "class _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                    },
                    {
                        "fragment1": [
                            640,
                            760
                        ],
                        "fragment2": [
                            1110,
                            1200
                        ],
                        "similarity": 1.0000000000000002,
                        "tokens1": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            "+",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ")",
                            "+",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ","
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            "]",
                            ";",
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ")",
                            "+",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier"
                        ],
                        "similarity_details": {
                            "lcs": 0.85,
                            "sequence_matcher": 0.85,
                            "ngram": 0.7777777777777778,
                            "levenshtein": 0.9060402684563759,
                            "tfidf_cosine": 0.9032400268543423,
                            "winnowing": 0.6666666666666666
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            740,
                            990
                        ],
                        "fragment2": [
                            1260,
                            1430
                        ],
                        "similarity": 1.0000000000000007,
                        "tokens1": [
                            "[",
                            "0",
                            "]",
                            "=",
                            "(",
                            "ID_Identifier",
                            "[",
                            "0",
                            "]",
                            "+",
                            "ID_Identifier",
                            ")",
                            "&",
                            "0xffffffff",
                            ";",
                            "ID_Identifier",
                            "[",
                            "1",
                            "]",
                            "="
                        ],
                        "tokens2": [
                            "[",
                            "5",
                            "]",
                            "=",
                            "(",
                            "ID_Identifier",
                            "[",
                            "5",
                            "]",
                            "+",
                            "ID_Identifier",
                            ")",
                            "&",
                            "0xffffffff",
                            ";",
                            "ID_Identifier",
                            "[",
                            "6",
                            "]",
                            "="
                        ],
                        "similarity_details": {
                            "lcs": 0.85,
                            "sequence_matcher": 0.85,
                            "ngram": 0.5555555555555556,
                            "levenshtein": 0.9642857142857143,
                            "tfidf_cosine": 0.5644570020409767,
                            "winnowing": 0.3333333333333333
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            970,
                            990
                        ],
                        "fragment2": [
                            1450,
                            1470
                        ],
                        "similarity": 0.7108814122903837,
                        "tokens1": [
                            "<<",
                            "(",
                            "32",
                            "-",
                            "ID_Identifier",
                            ")",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "(",
                            "22",
                            ",",
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier"
                        ],
                        "similarity_details": {
                            "lcs": 0.8,
                            "sequence_matcher": 0.8,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.814516129032258,
                            "tfidf_cosine": 0.7482242657529938,
                            "winnowing": 0.25
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            970,
                            1000
                        ],
                        "fragment2": [
                            1490,
                            1510
                        ],
                        "similarity": 1,
                        "tokens1": [
                            "<<",
                            "(",
                            "32",
                            "-",
                            "ID_Identifier",
                            ")",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            ",",
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "7"
                        ],
                        "similarity_details": {
                            "lcs": 0.75,
                            "sequence_matcher": 0.75,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.7479674796747968,
                            "tfidf_cosine": 0.7482242657529938,
                            "winnowing": 0.5
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            980,
                            1140
                        ],
                        "fragment2": [
                            1530,
                            1580
                        ],
                        "similarity": 1.0000000000000007,
                        "tokens1": [
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "2",
                            ",",
                            "ID_Identifier",
                            ")",
                            "^",
                            "ID_Identifier",
                            "."
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "17",
                            ",",
                            "ID_Identifier",
                            ")",
                            "^",
                            "ID_Identifier"
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.7777777777777778,
                            "levenshtein": 0.8676470588235294,
                            "tfidf_cosine": 0.8752690307575414,
                            "winnowing": 0.6666666666666666
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1120,
                            1270
                        ],
                        "fragment2": [
                            1590,
                            1710
                        ],
                        "similarity": 1.0000000000000009,
                        "tokens1": [
                            ">>>",
                            "10",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "("
                        ],
                        "tokens2": [
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "return",
                            "(",
                            "ID_Identifier",
                            "&"
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.8888888888888888,
                            "levenshtein": 0.8130081300813008,
                            "tfidf_cosine": 0.8922288908197358,
                            "winnowing": 0.5
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1250,
                            1280
                        ],
                        "fragment2": [
                            1800,
                            1830
                        ],
                        "similarity": 1,
                        "tokens1": [
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u0080-\\u07ff]/g",
                            ",",
                            "function"
                        ],
                        "tokens2": [
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g",
                            ",",
                            "function"
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.7777777777777778,
                            "levenshtein": 0.8160919540229885,
                            "tfidf_cosine": 0.8409526812426942,
                            "winnowing": 1
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1260,
                            1440
                        ],
                        "fragment2": [
                            1880,
                            1900
                        ],
                        "similarity": 1.0000000000000007,
                        "tokens1": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u0080-\\u07ff]/g",
                            ",",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u00c0-\\u00df][\\u0080-\\u00bf]/g",
                            ",",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "=",
                            "(",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "("
                        ],
                        "similarity_details": {
                            "lcs": 0.85,
                            "sequence_matcher": 0.85,
                            "ngram": 0.6111111111111112,
                            "levenshtein": 0.8157894736842105,
                            "tfidf_cosine": 0.7944040067626077,
                            "winnowing": 0.3333333333333333
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }"
                    },
                    {
                        "fragment1": [
                            1420,
                            1490
                        ],
                        "fragment2": [
                            1910,
                            1930
                        ],
                        "similarity": 1.0000000000000007,
                        "tokens1": [
                            "ID_Identifier",
                            "(",
                            "2",
                            ")",
                            "&",
                            "0x3f",
                            ")",
                            ";",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            ")",
                            ";",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            "(",
                            "1",
                            ")",
                            "&",
                            "0x3f",
                            ";",
                            "return",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            ")",
                            ";",
                            "return",
                            "ID_Identifier"
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.9107142857142857,
                            "tfidf_cosine": 0.8000972810214388,
                            "winnowing": 0.14285714285714285
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1890,
                            1920
                        ],
                        "fragment2": [
                            0,
                            30
                        ],
                        "similarity": 0.7493284865824371,
                        "tokens1": [
                            "]",
                            "class",
                            "ID_Identifier",
                            "{",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "import",
                            "ID_Identifier",
                            "ID_Identifier",
                            "\"./linked_list.js\"",
                            ";",
                            "class",
                            "ID_Identifier",
                            "{",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier"
                        ],
                        "similarity_details": {
                            "lcs": 0.75,
                            "sequence_matcher": 0.75,
                            "ngram": 0.7222222222222222,
                            "levenshtein": 0.774390243902439,
                            "tfidf_cosine": 0.8006727504796005,
                            "winnowing": 0.5
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            2490,
                            2510
                        ],
                        "fragment2": [
                            390,
                            410
                        ],
                        "similarity": 0.7149783475176564,
                        "tokens1": [
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "+",
                            "\" Es el Hash\"",
                            ")",
                            "this",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            ")",
                            "this",
                            ".",
                            "ID_Identifier",
                            "("
                        ],
                        "tokens2": [
                            "this",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            ")",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "(",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            ")",
                            ";",
                            "if",
                            "("
                        ],
                        "similarity_details": {
                            "lcs": 0.75,
                            "sequence_matcher": 0.6,
                            "ngram": 0.6111111111111112,
                            "levenshtein": 0.7163120567375887,
                            "tfidf_cosine": 0.7349685697395825,
                            "winnowing": 1
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"./linked_list.js\";\n\nclass _Node{\n    constructor(data,id){\n        this.data = data;\n        this.left = this.right = null;\n        this.id = `n${id}`;\n    }\n}\n\nexport default class MerkleTree{\n    constructor(){\n        this.root = null;\n        this.dataBlocks = null;\n        this.curr_block = null;\n        this.junkBlocks = null;\n        this.id = 0;\n    }\n    _fillDataBlocks(){\n        //get a power of 2 greater than number of data blocks\n        let n = 1;\n        let powerOf2 = Math.pow(2,n);\n        while(powerOf2 < this.dataBlocks.len){\n            n++;\n            powerOf2 = Math.pow(2,n);\n        }\n        //fill data blocks until lenght = powerOf2\n        this.junkBlocks = new LinkedList();\n        for (let i = this.dataBlocks.len; i < powerOf2; i++) {\n            this.junkBlocks.add(i*100);\n        }\n        return n;\n    }\n    genTree(list){\n        if(list.isEmpty()){\n            this.dataBlocks = list;\n            this.curr_block = this.dataBlocks.head;\n            const exp = this._fillDataBlocks();\n            this.root = new _Node(null, this.id++);\n            this._genTreeRec(this.root, exp);\n            this._genHash(this.root);\n        }\n    }\n    _genTreeRec(root, exp){\n        //pre order traversal\n        if(exp > 0){\n            root.left = new _Node(null, this.id++);\n            root.right = new _Node(null, this.id++);\n            this._genTreeRec(root.left, exp-1);\n            this._genTreeRec(root.right, exp-1);\n        }\n        //fill the last level with the hashes of the data blocks\n        else{\n            root.data = Sha256.hash(this.curr_block.data.toString());\n            if(this.curr_block.next){\n                this.curr_block = this.curr_block.next;\n            }\n            else{\n                this.curr_block = this.junkBlocks.head;\n            }\n        }\n    }\n    _genHash(root){\n        //post order traversal\n        if(root == null){\n            return;\n        }\n        this._genHash(root.left);\n        this._genHash(root.right);\n        //If the node's data is null, generate a hash for it\n        if(!root.data){\n            root.data = Sha256.hash(root.left.data + root.right.data);\n        }\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    }
                ],
                "ml_fragments": [
                    {
                        "type": "ml_block",
                        "block1": {
                            "start_line": 0,
                            "end_line": 50,
                            "code": "var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; } class NodoListaTemporal { constructor(datTemporal) { this.datTemporal = datTemporal this.siguiente = null this.anterior = null } } var contadorglobal = 0 var salida = \"\" class ListaTemporal { constructor() { this.cabeza = null this.cola = null this.size = 0 } insertLista(dato) { let nodo = new NodoListaTemporal(dato); if (this.cabeza == null) { this.cabeza = nodo; this.cola = nodo; this.size++; } else if (this.cabeza != null) { let aux = this.cabeza; while (aux != this.cola) { aux = aux.siguiente; } aux.siguiente = nodo; nodo.anterior = aux this.cola = nodo; this.size++; } } eliminarLista(dato) { let nodo = this.cabeza if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) { this.cabeza = null this.cola = null this.size = 0 return } while (nodo.datTemporal != dato && nodo != this.cola) { nodo = nodo.siguiente } if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) { let tmp = nodo.siguiente this.cabeza = tmp tmp.anterior = null nodo.siguiente = null this.size-- return } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) { let tmp = nodo.siguiente tmp.anterior = nodo.anterior nodo.anterior.siguiente = tmp nodo.siguiente = null nodo.anterior = null this.size-- return } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) { let tmp = nodo.anterior this.cola = tmp tmp.siguiente = null nodo.anterior = null this.size-- return } if (nodo == null) { console.log(\"No se encontro el dato a eliminar\") return } } } var recarga = [] class Nodo { constructor(dato, izquierda, derecha, nodohijo) { this.dato = dato this.hash = null this.id = 0 this.nodohijo = nodohijo this.izquierda = izquierda this.derecha = derecha } } class MerkleTree { constructor() { this.raiz = null } insertar(dato) { let nodo = new Nodo(dato, null, null, true) if (this.raiz == null) { let listatmp = new ListaTemporal() listatmp.insertLista(nodo) listatmp.insertLista(new Nodo(-1, null, null, true)) this.construirArbol(listatmp) } else { let listatmp = this.ObtenerLista() listatmp.insertLista(nodo) this.construirArbol(listatmp) } this.hashing() contadorglobal = 0 } ObtenerLista() { let listatmp = new ListaTemporal() this.obtenerlista(listatmp, this.raiz.izquierda) this.obtenerlista(listatmp, this.raiz.derecha) return listatmp } obtenerlista(lista, nodo) { if (nodo != null) { this.obtenerlista(lista, nodo.izquierda) if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) { lista.insertLista(nodo) } this.obtenerlista(lista, nodo.derecha) } } construirArbol(lista) { let tamanio = new Float64Array(lista.size) let cant = 1 let operacion = tamanio.length / 2 while (operacion > 1) { cant++ operacion = operacion / 2 } let vectorTotal = new Float64Array(cant) let totalnodos = Math.pow(2, vectorTotal.length) while (lista.size < Math.floor(totalnodos)) { lista.insertLista(new Nodo(-1, null, null, true)) } while (lista.size > 1) { let primero = lista.cabeza let segundo = primero.siguiente lista.eliminarLista(primero.datTemporal) lista.eliminarLista(segundo.datTemporal) let nodo1 = primero.datTemporal nodo1.id = contadorglobal + 1 let nodo2 = segundo.datTemporal nodo2.id = contadorglobal + 2 let suma = nodo1.dato + nodo2.dato let nuevo = new Nodo(suma, nodo1, nodo2, false) nuevo.id = contadorglobal lista.insertLista(nuevo) contadorglobal = contadorglobal + 3 } this.raiz = lista.cabeza.datTemporal } hashing() { if (this.raiz == null) { console.log(\"No existe arbol\") return } this.subHashing(this.raiz) } subHashing(nodo) { if (nodo != null) { let hasheo = Sha256.hash(String(nodo.dato)) nodo.hash = hasheo this.subHashing(nodo.izquierda) this.subHashing(nodo.derecha) } } imprimiendo() { if (this.raiz == null) { console.log(\"No existe arbol\") return } this.imprimir(this.raiz) } imprimir(nodo) { if (nodo != null) { console.log(nodo.dato + \" Es el dato\") console.log(nodo.hash + \" Es el Hash\") this.imprimir(nodo.izquierda) this.imprimir(nodo.derecha) } } preOrden(nodo, vector) { if (nodo != null) { vector.push(nodo.dato) this.preOrden(nodo.izquierda, vector) this.preOrden(nodo.derecha, vector) } return vector } graficar(valorBuscar) { salida = \"\" if (this.raiz == null) { console.log(\"No hay nada aun\") return } let nodo = this.raiz let contador = 0 salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\" this.graficando(nodo, valorBuscar) salida += \"}\" contador = 0 d3.select(' .width(750) .height(400) .renderDot(salida) return console.log(salida) } graficando(nodo, valorBuscar) { if (nodo != null) { if (valorBuscar == nodo.dato) { salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\" \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\" } else { salida += \"node\" + nodo.id + \" [label = \\\" \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\" } if (nodo.derecha != null) { salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\" } if (nodo.izquierda != null) { salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\" } if (nodo.izquierda != null) { this.graficando(nodo.izquierda, valorBuscar) } if (nodo.derecha != null) { this.graficando(nodo.derecha, valorBuscar) } } } getMerkleRoot() { return this.raiz.hash } } let Transacciones = new MerkleTree() Transacciones.graficar(0)"
                        },
                        "block2": {
                            "start_line": 0,
                            "end_line": 50,
                            "code": "import LinkedList from \"./linked_list.js\"; class _Node{ constructor(data,id){ this.data = data; this.left = this.right = null; this.id = `n${id}`; } } export default class MerkleTree{ constructor(){ this.root = null; this.dataBlocks = null; this.curr_block = null; this.junkBlocks = null; this.id = 0; } _fillDataBlocks(){ let n = 1; let powerOf2 = Math.pow(2,n); while(powerOf2 < this.dataBlocks.len){ n++; powerOf2 = Math.pow(2,n); } this.junkBlocks = new LinkedList(); for (let i = this.dataBlocks.len; i < powerOf2; i++) { this.junkBlocks.add(i*100); } return n; } genTree(list){ if(list.isEmpty()){ this.dataBlocks = list; this.curr_block = this.dataBlocks.head; const exp = this._fillDataBlocks(); this.root = new _Node(null, this.id++); this._genTreeRec(this.root, exp); this._genHash(this.root); } } _genTreeRec(root, exp){ if(exp > 0){ root.left = new _Node(null, this.id++); root.right = new _Node(null, this.id++); this._genTreeRec(root.left, exp-1); this._genTreeRec(root.right, exp-1); } else{ root.data = Sha256.hash(this.curr_block.data.toString()); if(this.curr_block.next){ this.curr_block = this.curr_block.next; } else{ this.curr_block = this.junkBlocks.head; } } } _genHash(root){ if(root == null){ return; } this._genHash(root.left); this._genHash(root.right); if(!root.data){ root.data = Sha256.hash(root.left.data + root.right.data); } } } var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; }"
                        },
                        "similarity": 0.7826109736901622,
                        "similarity_details": {
                            "tfidf": 0.8135298074469223,
                            "char_ngram": 0.70211477395347,
                            "word_ngram": 0.46817214646738037,
                            "embedding": 0.9646190404891968
                        }
                    }
                ],
                "is_plagiarism": false,
                "plagiarism_probability": 0.6953369351452039,
                "all_features": {
                    "lcs": 0.5259076489249207,
                    "sequence_matcher": 0.6257076955336549,
                    "ngram": 0.7492130115424974,
                    "levenshtein": 0.5059020946649693,
                    "tfidf_cosine": 0.9787062770831157,
                    "winnowing": 0.6194968553459119,
                    "ml_tfidf": 0.8135298074469223,
                    "ml_char_ngram": 0.70211477395347,
                    "ml_word_ngram": 0.46817214646738037,
                    "ml_embedding": 0.9646190404891968
                }
            },
            {
                "file1": {
                    "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                    "path": "-EDD_junio-Proyecto2_201800992-main\\js\\Arboles\\arbolMerkle.js",
                    "full_path": "C:\\Users\\gian-\\AppData\\Local\\Temp\\plagiarism_checker\\323c8304-f54c-4baa-a6a4-eefec5065d1f\\extracted_-EDD_junio-Proyecto2_201800992-main\\-EDD_junio-Proyecto2_201800992-main\\js\\Arboles\\arbolMerkle.js"
                },
                "file2": {
                    "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                    "path": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\block.js",
                    "full_path": "C:\\Users\\gian-\\AppData\\Local\\Temp\\plagiarism_checker\\323c8304-f54c-4baa-a6a4-eefec5065d1f\\extracted_-EDD_junio-Proyecto2_201801178-main\\-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\block.js"
                },
                "token_similarity": 0.6657556641443445,
                "token_similarity_details": {
                    "lcs": 0.5259076489249207,
                    "sequence_matcher": 0.6478506296135476,
                    "ngram": 0.7153411560191221,
                    "levenshtein": 0.4693322532114339,
                    "tfidf_cosine": 0.9678360468240756,
                    "winnowing": 0.5919003115264797
                },
                "ml_similarity": 0.7832133332332992,
                "ml_similarity_details": {
                    "tfidf": 0.8028736418297481,
                    "char_ngram": 0.6825066322237517,
                    "word_ngram": 0.48358712367656415,
                    "embedding": 0.9735496044158936
                },
                "combined_similarity": 0.7127387317799264,
                "similar_fragments": [
                    {
                        "fragment1": [
                            0,
                            20
                        ],
                        "fragment2": [
                            280,
                            300
                        ],
                        "similarity": 0.7727474779549475,
                        "tokens1": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "ID_Identifier",
                            "=",
                            "("
                        ],
                        "tokens2": [
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "ID_Identifier",
                            "=",
                            "(",
                            "typeof",
                            "ID_Identifier",
                            "=="
                        ],
                        "similarity_details": {
                            "lcs": 0.85,
                            "sequence_matcher": 0.85,
                            "ngram": 0.8333333333333334,
                            "levenshtein": 0.6451612903225806,
                            "tfidf_cosine": 0.8602427661188232,
                            "winnowing": 0.5
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            0,
                            1200
                        ],
                        "fragment2": [
                            1520,
                            1540
                        ],
                        "similarity": 0.9412181204694048,
                        "tokens1": [
                            "var",
                            "ID_Identifier",
                            "=",
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ",",
                            "ID_Identifier",
                            ")",
                            "{",
                            "ID_Identifier",
                            "=",
                            "("
                        ],
                        "tokens2": [
                            ";",
                            "}",
                            "var",
                            "ID_Identifier",
                            "=",
                            "{",
                            "}",
                            ";",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "="
                        ],
                        "similarity_details": {
                            "lcs": 0.85,
                            "sequence_matcher": 0.85,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.8083333333333333,
                            "tfidf_cosine": 0.8000834850559742,
                            "winnowing": 0.25
                        },
                        "code1": "\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1180,
                            1320
                        ],
                        "fragment2": [
                            1630,
                            1660
                        ],
                        "similarity": 0.9407070962311863,
                        "tokens1": [
                            "ID_Identifier",
                            "&",
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "=",
                            "\"\"",
                            ","
                        ],
                        "tokens2": [
                            ";",
                            "}",
                            ")",
                            ";",
                            "return",
                            "ID_Identifier",
                            ";",
                            "}",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "=",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier",
                            "="
                        ],
                        "similarity_details": {
                            "lcs": 0.75,
                            "sequence_matcher": 0.75,
                            "ngram": 0.6666666666666666,
                            "levenshtein": 0.8264462809917356,
                            "tfidf_cosine": 0.7380386116058992,
                            "winnowing": 0.5
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1300,
                            1480
                        ],
                        "fragment2": [
                            1710,
                            1760
                        ],
                        "similarity": 0.8763965607972026,
                        "tokens1": [
                            ")",
                            ";",
                            "}",
                            ")",
                            ";",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u0800-\\uffff]/g",
                            ",",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var",
                            "ID_Identifier"
                        ],
                        "tokens2": [
                            "ID_Identifier",
                            ")",
                            ";",
                            "}",
                            ")",
                            ";",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ".",
                            "ID_Identifier",
                            "(",
                            "/[\\u00c0-\\u00df][\\u0080-\\u00bf]/g",
                            ",",
                            "function",
                            "(",
                            "ID_Identifier",
                            ")",
                            "{",
                            "var"
                        ],
                        "similarity_details": {
                            "lcs": 0.9,
                            "sequence_matcher": 0.9,
                            "ngram": 0.7777777777777778,
                            "levenshtein": 0.6642857142857144,
                            "tfidf_cosine": 0.8426362202458457,
                            "winnowing": 0.3333333333333333
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    },
                    {
                        "fragment1": [
                            1570,
                            1590
                        ],
                        "fragment2": [
                            20,
                            60
                        ],
                        "similarity": 0.7881012364506065,
                        "tokens1": [
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "++",
                            ";",
                            "}",
                            "else"
                        ],
                        "tokens2": [
                            ",",
                            "}",
                            ")",
                            "{",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "=",
                            "ID_Identifier",
                            ";",
                            "this",
                            ".",
                            "ID_Identifier",
                            "="
                        ],
                        "similarity_details": {
                            "lcs": 0.8,
                            "sequence_matcher": 0.8,
                            "ngram": 0.7777777777777778,
                            "levenshtein": 0.8482142857142857,
                            "tfidf_cosine": 0.864514118760969,
                            "winnowing": 0.5
                        },
                        "code1": "/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}\n\n\n//Clase Nodo para lista temporal de carga de datos\nclass NodoListaTemporal {\n    //Constructor   \n    constructor(datTemporal) {\n        this.datTemporal = datTemporal\n        this.siguiente = null\n        this.anterior = null\n    }\n}\n\nvar contadorglobal = 0\nvar salida = \"\"\n\n//Clase Lista temporal para carga de datos\nclass ListaTemporal {\n    //Constructor\n    constructor() {\n        this.cabeza = null\n        this.cola = null\n        this.size = 0\n    }\n\n    //Metodo Insertar en lista temporal\n    insertLista(dato) {\n        let nodo = new NodoListaTemporal(dato);\n        //Insercion de primer nodo\n        if (this.cabeza == null) {\n            this.cabeza = nodo;\n            this.cola = nodo;\n            this.size++;\n        } else if (this.cabeza != null) { // Insercion de nodo No Cabeza\n            let aux = this.cabeza;\n            while (aux != this.cola) {\n                aux = aux.siguiente;\n            }\n            aux.siguiente = nodo;\n            nodo.anterior = aux\n            this.cola = nodo;\n            this.size++;\n        }\n    }\n\n    //Metodo Eliminar par alista temporal\n    eliminarLista(dato) {\n        let nodo = this.cabeza\n        if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) {\n            //Dato unico eliminado\n            this.cabeza = null\n            this.cola = null\n            this.size = 0\n            return\n        }\n        while (nodo.datTemporal != dato && nodo != this.cola) {\n            nodo = nodo.siguiente\n        }\n        if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) {\n            //Dato Eliminado en el al inicio\n            let tmp = nodo.siguiente\n            this.cabeza = tmp\n            tmp.anterior = null\n            nodo.siguiente = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) {\n            //Dato Eliminado en el centro\n            let tmp = nodo.siguiente\n            tmp.anterior = nodo.anterior\n            nodo.anterior.siguiente = tmp\n            nodo.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) {\n            //Dato eliminado al final de la lista\n            let tmp = nodo.anterior\n            this.cola = tmp\n            tmp.siguiente = null\n            nodo.anterior = null\n            this.size--\n            return\n        }\n        if (nodo == null) {\n            //Dato no encontrado\n            console.log(\"No se encontro el dato a eliminar\")\n            return\n        }\n    }\n}\n\n//arreglo para reestructuracion de datos\nvar recarga = []\n\n//Clase Nodo para arbol merkle\nclass Nodo {\n    //Constructor\n    constructor(dato, izquierda, derecha, nodohijo) {\n        this.dato = dato\n        this.hash = null\n        this.id = 0\n        this.nodohijo = nodohijo\n        this.izquierda = izquierda\n        this.derecha = derecha\n    }\n}\n\n//Clase Arbol Merkle\nclass MerkleTree {\n    //Constructor\n    constructor() {\n        this.raiz = null\n    }\n\n    //Metodo Insertar en arbol Merkle\n    insertar(dato) {\n        let nodo = new Nodo(dato, null, null, true)\n        //Insercion de primer nodo\n        if (this.raiz == null) {\n            let listatmp = new ListaTemporal()\n            listatmp.insertLista(nodo)\n            listatmp.insertLista(new Nodo(-1, null, null, true))\n            this.construirArbol(listatmp)\n        } else {  //Insercion de Nodo no primero\n            let listatmp = this.ObtenerLista()\n            listatmp.insertLista(nodo)\n            this.construirArbol(listatmp)\n        }\n        //Hasheo de datos en sha256\n        this.hashing()\n        contadorglobal = 0\n    }\n\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\n    ObtenerLista() {\n        let listatmp = new ListaTemporal()\n        this.obtenerlista(listatmp, this.raiz.izquierda)\n        this.obtenerlista(listatmp, this.raiz.derecha)\n        return listatmp\n    }\n\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\n    obtenerlista(lista, nodo) {\n        if (nodo != null) {\n            this.obtenerlista(lista, nodo.izquierda)\n            if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) {\n                lista.insertLista(nodo)\n            }\n            this.obtenerlista(lista, nodo.derecha)\n        }\n    }\n\n    //Metodo para armado base de arbol\n    construirArbol(lista) {\n        let tamanio = new Float64Array(lista.size)\n        let cant = 1\n        let operacion = tamanio.length / 2\n        //Calculo de nodos actuales\n        while (operacion > 1) {\n            cant++\n            operacion = operacion / 2\n        }\n        let vectorTotal = new Float64Array(cant)\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\n        //Complemetacion de nodos hijo para arbol merkle final\n        while (lista.size < Math.floor(totalnodos)) {\n            lista.insertLista(new Nodo(-1, null, null, true))\n        }\n        //Insercion de datos en arbol\n        while (lista.size > 1) {\n            let primero = lista.cabeza\n            let segundo = primero.siguiente\n            lista.eliminarLista(primero.datTemporal)\n            lista.eliminarLista(segundo.datTemporal)\n            let nodo1 = primero.datTemporal\n            nodo1.id = contadorglobal + 1\n            let nodo2 = segundo.datTemporal\n            nodo2.id = contadorglobal + 2\n            let suma = nodo1.dato + nodo2.dato\n            let nuevo = new Nodo(suma, nodo1, nodo2, false)\n            nuevo.id = contadorglobal\n            lista.insertLista(nuevo)\n            contadorglobal = contadorglobal + 3\n        }\n        //Asignacion de raiz\n        this.raiz = lista.cabeza.datTemporal\n    }\n\n    //Metodo Asignacion de Hash\n    hashing() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.subHashing(this.raiz)\n    }\n\n    //SubMetodo Asignacion de Hash\n    subHashing(nodo) {\n        if (nodo != null) {\n            let hasheo = Sha256.hash(String(nodo.dato))\n            nodo.hash = hasheo\n            this.subHashing(nodo.izquierda)\n            this.subHashing(nodo.derecha)\n        }\n    }\n\n    //Metodo Imprimir\n    imprimiendo() {\n        if (this.raiz == null) {\n            console.log(\"No existe arbol\")\n            return\n        }\n        this.imprimir(this.raiz)\n    }\n\n    //SubMetodo Imprimir\n    imprimir(nodo) {\n        if (nodo != null) {\n            console.log(nodo.dato + \" Es el dato\")\n            console.log(nodo.hash + \" Es el Hash\")\n            this.imprimir(nodo.izquierda)\n            this.imprimir(nodo.derecha)\n        }\n    }\n\n\n\n\n\n    preOrden(nodo, vector) {\n        if (nodo != null) {\n            vector.push(nodo.dato)\n            this.preOrden(nodo.izquierda, vector)\n            this.preOrden(nodo.derecha, vector)\n        }\n        return vector\n    }\n\n\n    //Metodo Graficar\n    graficar(valorBuscar) {\n\n        salida = \"\"\n        if (this.raiz == null) {\n            console.log(\"No hay nada aun\")\n            return\n        }\n        let nodo = this.raiz\n        let contador = 0\n        salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\n        this.graficando(nodo, valorBuscar)\n        salida += \"}\"\n        \n        contador = 0\n        d3.select('#merkle').graphviz()\n        .width(750)\n        .height(400)\n        .renderDot(salida) \n\n        return console.log(salida)\n    }\n\n    //SubMetodo Buscar\n    graficando(nodo, valorBuscar) {\n        if (nodo != null) {\n            if (valorBuscar == nodo.dato) {\n                salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\"\n            } else {\n                salida += \"node\" + nodo.id + \" [label = \\\"  \" + nodo.dato + \"|\" + nodo.hash + \"  \\\"]; \\n\"\n            }\n            if (nodo.derecha != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\n            }\n            if (nodo.izquierda != null) {\n                this.graficando(nodo.izquierda, valorBuscar)\n            }\n            if (nodo.derecha != null) {\n                this.graficando(nodo.derecha, valorBuscar)\n            }\n        }\n\n    }\n\n    getMerkleRoot() {\n        return  this.raiz.hash\n    }\n}\n\nlet Transacciones = new MerkleTree()\nTransacciones.graficar(0)",
                        "code2": "import LinkedList from \"../data_structs/linked_list.js\";\n\nclass _Block{\n    constructor({\n        index,\n        timeStamp,\n        prevHash,\n        rootMerkle,\n        data,\n    }){\n        this.index = index;\n        this.timeStamp = timeStamp;\n        this.prevHash = prevHash;\n        this.rootMerkle = rootMerkle;\n        this.data = data;\n        this.hash = this._genHash();\n        this.nonce = 0;\n        this._proofOfWork();\n    }\n    _proofOfWork(){\n        while(!this.hash.startsWith('00')){\n            this.nonce++;\n            this.hash = this._genHash();\n        }\n    }\n    _genHash(){\n        return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce);\n    }\n    toString(){\n        return `\n        bloque: ${this.index}\\\\n\n        hash: ${this.hash}\\\\n\n        nonce: ${this.nonce}\\\\n\n        prev: ${this.prevHash}\\\\n\n        rootMerkle: ${this.rootMerkle}\\\\n\n        transacciones:\\\\n\n        ${this.data}\n        timeStamp: ${this.timeStamp}\n        `;\n    }\n}\n\nexport default class BlockChain{\n    constructor(){\n        this.blocks = new LinkedList();\n        this.index = 0;\n    }\n    genNewBlock(timeStamp, root, list){\n        const data = {\n            index: this.index++,\n            timeStamp: timeStamp,\n            prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '',\n            rootMerkle: root,\n            data: list,\n        };\n        this.blocks.add(new _Block(data));\n    }\n}\n\n//SHA256 CODE BECAUSE I COULDN'T EXPORT IT FROM ANOTHER FILE\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  SHA-256 implementation in JavaScript | (c) Chris Veness 2002-2010 | www.movable-type.co.uk    */\n/*   - see http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html                             */\n/*         http://csrc.nist.gov/groups/ST/toolkit/examples.html                                   */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Sha256 = {};  // Sha256 namespace\n\n/**\n * Generates SHA-256 hash of string\n *\n * @param {String} msg                String to be hashed\n * @param {Boolean} [utf8encode=true] Encode msg as UTF-8 before generating hash\n * @returns {String}                  Hash of msg as hex character string\n */\nSha256.hash = function (msg, utf8encode) {\n    utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode;\n\n    // convert string to UTF-8, as SHA only deals with byte-streams\n    if (utf8encode) msg = Utf8.encode(msg);\n\n    // constants [§4.2.2]\n    var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n    // initial hash value [§5.3.1]\n    var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\n    // PREPROCESSING \n\n    msg += String.fromCharCode(0x80);  // add trailing '1' bit (+ 0's padding) to string [§5.1.1]\n\n    // convert string msg into 512-bit/16-integer blocks arrays of ints [§5.2.1]\n    var l = msg.length / 4 + 2;  // length (in 32-bit integers) of msg + ‘1’ + appended length\n    var N = Math.ceil(l / 16);   // number of 16-integer-blocks required to hold 'l' ints\n    var M = new Array(N);\n\n    for (var i = 0; i < N; i++) {\n        M[i] = new Array(16);\n        for (var j = 0; j < 16; j++) {  // encode 4 chars per integer, big-endian encoding\n            M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) |\n                (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3));\n        } // note running off the end of msg is ok 'cos bitwise ops on NaN return 0\n    }\n    // add length (in bits) into final pair of 32-bit integers (big-endian) [§5.1.1]\n    // note: most significant word would be (len-1)*8 >>> 32, but since JS converts\n    // bitwise-op args to 32 bits, we need to simulate this by arithmetic operators\n    M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14])\n    M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff;\n\n\n    // HASH COMPUTATION [§6.1.2]\n\n    var W = new Array(64); var a, b, c, d, e, f, g, h;\n    for (var i = 0; i < N; i++) {\n\n        // 1 - prepare message schedule 'W'\n        for (var t = 0; t < 16; t++) W[t] = M[i][t];\n        for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff;\n\n        // 2 - initialise working variables a, b, c, d, e, f, g, h with previous hash value\n        a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7];\n\n        // 3 - main loop (note 'addition modulo 2^32')\n        for (var t = 0; t < 64; t++) {\n            var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t];\n            var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c);\n            h = g;\n            g = f;\n            f = e;\n            e = (d + T1) & 0xffffffff;\n            d = c;\n            c = b;\n            b = a;\n            a = (T1 + T2) & 0xffffffff;\n        }\n        // 4 - compute the new intermediate hash value (note 'addition modulo 2^32')\n        H[0] = (H[0] + a) & 0xffffffff;\n        H[1] = (H[1] + b) & 0xffffffff;\n        H[2] = (H[2] + c) & 0xffffffff;\n        H[3] = (H[3] + d) & 0xffffffff;\n        H[4] = (H[4] + e) & 0xffffffff;\n        H[5] = (H[5] + f) & 0xffffffff;\n        H[6] = (H[6] + g) & 0xffffffff;\n        H[7] = (H[7] + h) & 0xffffffff;\n    }\n\n    return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) +\n        Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]);\n}\n\nSha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); }\nSha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); }\nSha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); }\nSha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); }\nSha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); }\nSha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); }\nSha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); }\n\n//\n// hexadecimal representation of a number \n//   (note toString(16) is implementation-dependant, and  \n//   in IE returns signed numbers when used on full words)\n//\nSha256.toHexStr = function (n) {\n    var s = \"\", v;\n    for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); }\n    return s;\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/*  Utf8 class: encode / decode between multi-byte Unicode characters and UTF-8 multiple          */\n/*              single-byte character encoding (c) Chris Veness 2002-2010                         */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nvar Utf8 = {};  // Utf8 namespace\n\n/**\n * Encode multi-byte Unicode string into utf-8 multiple single-byte characters \n * (BMP / basic multilingual plane only)\n *\n * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars\n *\n * @param {String} strUni Unicode string to be encoded as UTF-8\n * @returns {String} encoded string\n */\nUtf8.encode = function (strUni) {\n    // use regular expressions & String.replace callback function for better efficiency \n    // than procedural approaches\n    var strUtf = strUni.replace(\n        /[\\u0080-\\u07ff]/g,  // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);\n        }\n    );\n    strUtf = strUtf.replace(\n        /[\\u0800-\\uffff]/g,  // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n        function (c) {\n            var cc = c.charCodeAt(0);\n            return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);\n        }\n    );\n    return strUtf;\n}\n\n/**\n * Decode utf-8 encoded string back into multi-byte Unicode characters\n *\n * @param {String} strUtf UTF-8 string to be decoded back to Unicode\n * @returns {String} decoded string\n */\nUtf8.decode = function (strUtf) {\n    // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!\n    var strUni = strUtf.replace(\n        /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g,  // 3-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);\n            return String.fromCharCode(cc);\n        }\n    );\n    strUni = strUni.replace(\n        /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g,                 // 2-byte chars\n        function (c) {  // (note parentheses for precence)\n            var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;\n            return String.fromCharCode(cc);\n        }\n    );\n    return strUni;\n}"
                    }
                ],
                "ml_fragments": [
                    {
                        "type": "ml_block",
                        "block1": {
                            "start_line": 0,
                            "end_line": 50,
                            "code": "var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; } class NodoListaTemporal { constructor(datTemporal) { this.datTemporal = datTemporal this.siguiente = null this.anterior = null } } var contadorglobal = 0 var salida = \"\" class ListaTemporal { constructor() { this.cabeza = null this.cola = null this.size = 0 } insertLista(dato) { let nodo = new NodoListaTemporal(dato); if (this.cabeza == null) { this.cabeza = nodo; this.cola = nodo; this.size++; } else if (this.cabeza != null) { let aux = this.cabeza; while (aux != this.cola) { aux = aux.siguiente; } aux.siguiente = nodo; nodo.anterior = aux this.cola = nodo; this.size++; } } eliminarLista(dato) { let nodo = this.cabeza if (this.cabeza.datTemporal == dato && this.cabeza == this.cola) { this.cabeza = null this.cola = null this.size = 0 return } while (nodo.datTemporal != dato && nodo != this.cola) { nodo = nodo.siguiente } if (nodo.datTemporal == dato && nodo.anterior == null && nodo.siguiente != null) { let tmp = nodo.siguiente this.cabeza = tmp tmp.anterior = null nodo.siguiente = null this.size-- return } else if (nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null) { let tmp = nodo.siguiente tmp.anterior = nodo.anterior nodo.anterior.siguiente = tmp nodo.siguiente = null nodo.anterior = null this.size-- return } else if (nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null) { let tmp = nodo.anterior this.cola = tmp tmp.siguiente = null nodo.anterior = null this.size-- return } if (nodo == null) { console.log(\"No se encontro el dato a eliminar\") return } } } var recarga = [] class Nodo { constructor(dato, izquierda, derecha, nodohijo) { this.dato = dato this.hash = null this.id = 0 this.nodohijo = nodohijo this.izquierda = izquierda this.derecha = derecha } } class MerkleTree { constructor() { this.raiz = null } insertar(dato) { let nodo = new Nodo(dato, null, null, true) if (this.raiz == null) { let listatmp = new ListaTemporal() listatmp.insertLista(nodo) listatmp.insertLista(new Nodo(-1, null, null, true)) this.construirArbol(listatmp) } else { let listatmp = this.ObtenerLista() listatmp.insertLista(nodo) this.construirArbol(listatmp) } this.hashing() contadorglobal = 0 } ObtenerLista() { let listatmp = new ListaTemporal() this.obtenerlista(listatmp, this.raiz.izquierda) this.obtenerlista(listatmp, this.raiz.derecha) return listatmp } obtenerlista(lista, nodo) { if (nodo != null) { this.obtenerlista(lista, nodo.izquierda) if (nodo != null && nodo.dato != -1 && nodo.nodohijo == true) { lista.insertLista(nodo) } this.obtenerlista(lista, nodo.derecha) } } construirArbol(lista) { let tamanio = new Float64Array(lista.size) let cant = 1 let operacion = tamanio.length / 2 while (operacion > 1) { cant++ operacion = operacion / 2 } let vectorTotal = new Float64Array(cant) let totalnodos = Math.pow(2, vectorTotal.length) while (lista.size < Math.floor(totalnodos)) { lista.insertLista(new Nodo(-1, null, null, true)) } while (lista.size > 1) { let primero = lista.cabeza let segundo = primero.siguiente lista.eliminarLista(primero.datTemporal) lista.eliminarLista(segundo.datTemporal) let nodo1 = primero.datTemporal nodo1.id = contadorglobal + 1 let nodo2 = segundo.datTemporal nodo2.id = contadorglobal + 2 let suma = nodo1.dato + nodo2.dato let nuevo = new Nodo(suma, nodo1, nodo2, false) nuevo.id = contadorglobal lista.insertLista(nuevo) contadorglobal = contadorglobal + 3 } this.raiz = lista.cabeza.datTemporal } hashing() { if (this.raiz == null) { console.log(\"No existe arbol\") return } this.subHashing(this.raiz) } subHashing(nodo) { if (nodo != null) { let hasheo = Sha256.hash(String(nodo.dato)) nodo.hash = hasheo this.subHashing(nodo.izquierda) this.subHashing(nodo.derecha) } } imprimiendo() { if (this.raiz == null) { console.log(\"No existe arbol\") return } this.imprimir(this.raiz) } imprimir(nodo) { if (nodo != null) { console.log(nodo.dato + \" Es el dato\") console.log(nodo.hash + \" Es el Hash\") this.imprimir(nodo.izquierda) this.imprimir(nodo.derecha) } } preOrden(nodo, vector) { if (nodo != null) { vector.push(nodo.dato) this.preOrden(nodo.izquierda, vector) this.preOrden(nodo.derecha, vector) } return vector } graficar(valorBuscar) { salida = \"\" if (this.raiz == null) { console.log(\"No hay nada aun\") return } let nodo = this.raiz let contador = 0 salida += \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\" this.graficando(nodo, valorBuscar) salida += \"}\" contador = 0 d3.select(' .width(750) .height(400) .renderDot(salida) return console.log(salida) } graficando(nodo, valorBuscar) { if (nodo != null) { if (valorBuscar == nodo.dato) { salida += \"node\" + nodo.id + \" [color=\\\"green\\\" label = \\\" \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\" } else { salida += \"node\" + nodo.id + \" [label = \\\" \" + nodo.dato + \"|\" + nodo.hash + \" \\\"]; \\n\" } if (nodo.derecha != null) { salida += \"node\" + nodo.id + \" -> node\" + nodo.derecha.id + \"\\n\" } if (nodo.izquierda != null) { salida += \"node\" + nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\" } if (nodo.izquierda != null) { this.graficando(nodo.izquierda, valorBuscar) } if (nodo.derecha != null) { this.graficando(nodo.derecha, valorBuscar) } } } getMerkleRoot() { return this.raiz.hash } } let Transacciones = new MerkleTree() Transacciones.graficar(0)"
                        },
                        "block2": {
                            "start_line": 0,
                            "end_line": 50,
                            "code": "import LinkedList from \"../data_structs/linked_list.js\"; class _Block{ constructor({ index, timeStamp, prevHash, rootMerkle, data, }){ this.index = index; this.timeStamp = timeStamp; this.prevHash = prevHash; this.rootMerkle = rootMerkle; this.data = data; this.hash = this._genHash(); this.nonce = 0; this._proofOfWork(); } _proofOfWork(){ while(!this.hash.startsWith('00')){ this.nonce++; this.hash = this._genHash(); } } _genHash(){ return Sha256.hash(this.index+this.timeStamp+this.prevHash+this.root+this.nonce); } toString(){ return ` bloque: ${this.index}\\\\n hash: ${this.hash}\\\\n nonce: ${this.nonce}\\\\n prev: ${this.prevHash}\\\\n rootMerkle: ${this.rootMerkle}\\\\n transacciones:\\\\n ${this.data} timeStamp: ${this.timeStamp} `; } } export default class BlockChain{ constructor(){ this.blocks = new LinkedList(); this.index = 0; } genNewBlock(timeStamp, root, list){ const data = { index: this.index++, timeStamp: timeStamp, prevHash: (this.blocks.isEmpty()) ? this.blocks.end.data.hash : '', rootMerkle: root, data: list, }; this.blocks.add(new _Block(data)); } } var Sha256 = {}; Sha256.hash = function (msg, utf8encode) { utf8encode = (typeof utf8encode == 'undefined') ? true : utf8encode; if (utf8encode) msg = Utf8.encode(msg); var K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]; var H = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19]; msg += String.fromCharCode(0x80); var l = msg.length / 4 + 2; var N = Math.ceil(l / 16); var M = new Array(N); for (var i = 0; i < N; i++) { M[i] = new Array(16); for (var j = 0; j < 16; j++) { M[i][j] = (msg.charCodeAt(i * 64 + j * 4) << 24) | (msg.charCodeAt(i * 64 + j * 4 + 1) << 16) | (msg.charCodeAt(i * 64 + j * 4 + 2) << 8) | (msg.charCodeAt(i * 64 + j * 4 + 3)); } } M[N - 1][14] = ((msg.length - 1) * 8) / Math.pow(2, 32); M[N - 1][14] = Math.floor(M[N - 1][14]) M[N - 1][15] = ((msg.length - 1) * 8) & 0xffffffff; var W = new Array(64); var a, b, c, d, e, f, g, h; for (var i = 0; i < N; i++) { for (var t = 0; t < 16; t++) W[t] = M[i][t]; for (var t = 16; t < 64; t++) W[t] = (Sha256.sigma1(W[t - 2]) + W[t - 7] + Sha256.sigma0(W[t - 15]) + W[t - 16]) & 0xffffffff; a = H[0]; b = H[1]; c = H[2]; d = H[3]; e = H[4]; f = H[5]; g = H[6]; h = H[7]; for (var t = 0; t < 64; t++) { var T1 = h + Sha256.Sigma1(e) + Sha256.Ch(e, f, g) + K[t] + W[t]; var T2 = Sha256.Sigma0(a) + Sha256.Maj(a, b, c); h = g; g = f; f = e; e = (d + T1) & 0xffffffff; d = c; c = b; b = a; a = (T1 + T2) & 0xffffffff; } H[0] = (H[0] + a) & 0xffffffff; H[1] = (H[1] + b) & 0xffffffff; H[2] = (H[2] + c) & 0xffffffff; H[3] = (H[3] + d) & 0xffffffff; H[4] = (H[4] + e) & 0xffffffff; H[5] = (H[5] + f) & 0xffffffff; H[6] = (H[6] + g) & 0xffffffff; H[7] = (H[7] + h) & 0xffffffff; } return Sha256.toHexStr(H[0]) + Sha256.toHexStr(H[1]) + Sha256.toHexStr(H[2]) + Sha256.toHexStr(H[3]) + Sha256.toHexStr(H[4]) + Sha256.toHexStr(H[5]) + Sha256.toHexStr(H[6]) + Sha256.toHexStr(H[7]); } Sha256.ROTR = function (n, x) { return (x >>> n) | (x << (32 - n)); } Sha256.Sigma0 = function (x) { return Sha256.ROTR(2, x) ^ Sha256.ROTR(13, x) ^ Sha256.ROTR(22, x); } Sha256.Sigma1 = function (x) { return Sha256.ROTR(6, x) ^ Sha256.ROTR(11, x) ^ Sha256.ROTR(25, x); } Sha256.sigma0 = function (x) { return Sha256.ROTR(7, x) ^ Sha256.ROTR(18, x) ^ (x >>> 3); } Sha256.sigma1 = function (x) { return Sha256.ROTR(17, x) ^ Sha256.ROTR(19, x) ^ (x >>> 10); } Sha256.Ch = function (x, y, z) { return (x & y) ^ (~x & z); } Sha256.Maj = function (x, y, z) { return (x & y) ^ (x & z) ^ (y & z); } Sha256.toHexStr = function (n) { var s = \"\", v; for (var i = 7; i >= 0; i--) { v = (n >>> (i * 4)) & 0xf; s += v.toString(16); } return s; } var Utf8 = {}; Utf8.encode = function (strUni) { var strUtf = strUni.replace( /[\\u0080-\\u07ff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f); } ); strUtf = strUtf.replace( /[\\u0800-\\uffff]/g, function (c) { var cc = c.charCodeAt(0); return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f); } ); return strUtf; } Utf8.decode = function (strUtf) { var strUni = strUtf.replace( /[\\u00e0-\\u00ef][\\u0080-\\u00bf][\\u0080-\\u00bf]/g, function (c) { var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f); return String.fromCharCode(cc); } ); strUni = strUni.replace( /[\\u00c0-\\u00df][\\u0080-\\u00bf]/g, function (c) { var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f; return String.fromCharCode(cc); } ); return strUni; }"
                        },
                        "similarity": 0.7832133332332992,
                        "similarity_details": {
                            "tfidf": 0.8028736418297481,
                            "char_ngram": 0.6825066322237517,
                            "word_ngram": 0.48358712367656415,
                            "embedding": 0.9735496044158936
                        }
                    }
                ],
                "is_plagiarism": false,
                "plagiarism_probability": 0.6860685048265538,
                "all_features": {
                    "lcs": 0.5259076489249207,
                    "sequence_matcher": 0.6478506296135476,
                    "ngram": 0.7153411560191221,
                    "levenshtein": 0.4693322532114339,
                    "tfidf_cosine": 0.9678360468240756,
                    "winnowing": 0.5919003115264797,
                    "ml_tfidf": 0.8028736418297481,
                    "ml_char_ngram": 0.6825066322237517,
                    "ml_word_ngram": 0.48358712367656415,
                    "ml_embedding": 0.9735496044158936
                }
            }
        ],
        "clustering": {
            "clusters": {
                "0": [
                    {
                        "index": 0,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                            "path": "-EDD_junio-Proyecto2_201800992-main\\js\\Arboles\\arbolAvl.js"
                        }
                    },
                    {
                        "index": 1,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                            "path": "-EDD_junio-Proyecto2_201800992-main\\js\\Arboles\\arbolMerkle.js"
                        }
                    },
                    {
                        "index": 2,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                            "path": "-EDD_junio-Proyecto2_201800992-main\\js\\Arboles\\bts.js"
                        }
                    },
                    {
                        "index": 3,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                            "path": "-EDD_junio-Proyecto2_201800992-main\\js\\BlockChain\\blockChain.js"
                        }
                    },
                    {
                        "index": 4,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                            "path": "-EDD_junio-Proyecto2_201800992-main\\js\\Hash\\tablaHash.js"
                        }
                    },
                    {
                        "index": 5,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                            "path": "-EDD_junio-Proyecto2_201800992-main\\js\\Lineales\\ListaSimple.js"
                        }
                    },
                    {
                        "index": 6,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201800992-main",
                            "path": "-EDD_junio-Proyecto2_201800992-main\\js\\Lineales\\transacciones.js"
                        }
                    },
                    {
                        "index": 7,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\main.js"
                        }
                    },
                    {
                        "index": 8,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\classes\\actor.js"
                        }
                    },
                    {
                        "index": 9,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\classes\\category.js"
                        }
                    },
                    {
                        "index": 10,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\classes\\comment.js"
                        }
                    },
                    {
                        "index": 11,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\classes\\graph.js"
                        }
                    },
                    {
                        "index": 12,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\classes\\movie.js"
                        }
                    },
                    {
                        "index": 13,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\classes\\rent.js"
                        }
                    },
                    {
                        "index": 14,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\classes\\ui.js"
                        }
                    },
                    {
                        "index": 15,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\classes\\user.js"
                        }
                    },
                    {
                        "index": 16,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\avl_tree.js"
                        }
                    },
                    {
                        "index": 17,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\block.js"
                        }
                    },
                    {
                        "index": 18,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\bst.js"
                        }
                    },
                    {
                        "index": 19,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\hash_map.js"
                        }
                    },
                    {
                        "index": 20,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\linked_list.js"
                        }
                    },
                    {
                        "index": 21,
                        "metadata": {
                            "submission": "extracted_-EDD_junio-Proyecto2_201801178-main",
                            "path": "-EDD_junio-Proyecto2_201801178-main\\src\\data_structs\\merkle.js"
                        }
                    },
                    {
                        "index": 22,
                        "metadata": {
                            "submission": "extracted_EDD_junio-Proyecto2_201801518-master",
                            "path": "EDD_junio-Proyecto2_201801518-master\\index.js"
                        }
                    }
                ]
            },
            "noise": [],
            "intra_cluster_similarities": {
                "0": 0.9777370095252991
            },
            "visualization": "",
            "num_clusters": 1,
            "method": "dbscan",
            "params": {
                "dbscan": {
                    "eps": 0.2,
                    "min_samples": 2
                },
                "kmeans": {
                    "n_clusters": 4
                },
                "hdbscan": {
                    "min_cluster_size": 2,
                    "min_samples": 1
                }
            }
        },
        "weights": {
            "token": {
                "lcs": 0.15,
                "sequence_matcher": 0.15,
                "ngram": 0.2,
                "levenshtein": 0.2,
                "tfidf_cosine": 0.2,
                "winnowing": 0.1
            },
            "combined": {
                "token": 0.6,
                "ml": 0.4
            }
        }
    }
}